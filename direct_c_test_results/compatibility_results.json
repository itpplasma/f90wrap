{
  "generated": "2025-10-07T01:04:27.892592",
  "summary": {
    "total": 50,
    "passed": 32,
    "failed": 17,
    "skipped": 1,
    "pass_rate": "64.0%"
  },
  "results": [
    {
      "name": "arrayderivedtypes",
      "path": "/home/ert/code/f90wrap/examples/arrayderivedtypes",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_module_calcul.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _module_calcul.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:parser reading type type_ptmes\nINFO:f90wrap.parser:parser reading type array_type\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'array_type': Type(name=array_type),\n 'class(array_type)': Type(name=array_type),\n 'class(type_ptmes)': Type(name=type_ptmes),\n 'type(array_type)': Type(name=array_type),\n 'type(type_ptmes)': Type(name=type_ptmes),\n 'type_ptmes': Type(name=type_ptmes)}\n\nClass name mapping:\n{'array_type': 'array_type',\n 'class(array_type)': 'array_type',\n 'class(type_ptmes)': 'type_ptmes',\n 'type(array_type)': 'array_type',\n 'type(type_ptmes)': 'type_ptmes',\n 'type_ptmes': 'type_ptmes'}\nModules for each type:\n{'module_calcul': 'module_calcul'}\nINFO:f90wrap.transform:adding missing constructor for type_ptmes\nINFO:f90wrap.transform:adding missing constructor for array_type\nINFO:f90wrap.transform:adding missing destructor for type_ptmes\nINFO:f90wrap.transform:adding missing destructor for array_type\nINFO:f90wrap.transform:visiting Module(name=module_calcul) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=type_ptmes) found 1 constructors with names: ['type_ptmes_initialise']\nINFO:f90wrap.transform:visiting Type(name=array_type) found 1 constructors with names: ['array_type_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module module_calcul\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type type_ptmes\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine type_ptmes_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine type_ptmes_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type array_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_type_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_type_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine recup_point\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module module_calcul\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type type_ptmes\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine type_ptmes_initialise call_name type_ptmes_initialise mod_name 'module_calcul'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine type_ptmes_finalise call_name type_ptmes_finalise mod_name 'module_calcul'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type array_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_type_initialise call_name array_type_initialise mod_name 'module_calcul'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_type_finalise call_name array_type_finalise mod_name 'module_calcul'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine recup_point call_name recup_point mod_name 'module_calcul'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _module_calcul.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "arrays",
      "path": "/home/ert/code/f90wrap/examples/arrays",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['library.fpp', 'parameters.fpp']",
        "Generated C: ['_library.c']",
        "Wrapper sources: ['f90wrap_library.f90', 'f90wrap_parameters.f90']",
        "Compilation order: ['parameters_pp.f90', 'f90wrap_parameters.f90', 'library_pp.f90', 'f90wrap_library.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _library.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['library.fpp', 'parameters.fpp'] ...\nINFO:f90wrap.parser:marking module library as default private\nINFO:f90wrap.parser:marking module parameters as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=library) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Module(name=parameters) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module library\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine do_array_stuff\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine only_manipulate\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module parameters\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module library\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array call_name return_array mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine do_array_stuff call_name do_array_stuff mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine only_manipulate call_name only_manipulate mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module parameters\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _library.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "............\n----------------------------------------------------------------------\nRan 12 tests in 0.215s\n\nOK\n"
    },
    {
      "name": "arrays_fixed",
      "path": "/home/ert/code/f90wrap/examples/arrays_fixed",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['library.f', 'parameters.f']",
        "Generated C: ['_library.c']",
        "Wrapper sources: ['f90wrap_library.f90', 'f90wrap_parameters.f90']",
        "Compilation order: ['parameters.f', 'f90wrap_parameters.f90', 'library.f', 'f90wrap_library.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _library.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['library.f', 'parameters.f'] ...\nINFO:f90wrap.parser:marking module library as default private\nINFO:f90wrap.parser:marking module parameters as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=library) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Module(name=parameters) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module library\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine only_manipulate\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine do_array_stuff\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module parameters\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module library\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine only_manipulate call_name only_manipulate mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine do_array_stuff call_name do_array_stuff mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array call_name return_array mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module parameters\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _library.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "....\n----------------------------------------------------------------------\nRan 4 tests in 0.125s\n\nOK\n"
    },
    {
      "name": "arrays_in_derived_types_issue50",
      "path": "/home/ert/code/f90wrap/examples/arrays_in_derived_types_issue50",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_module_test.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _module_test.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:parser reading type real_array\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(real_array)': Type(name=real_array),\n 'real_array': Type(name=real_array),\n 'type(real_array)': Type(name=real_array)}\n\nClass name mapping:\n{'class(real_array)': 'real_array',\n 'real_array': 'real_array',\n 'type(real_array)': 'real_array'}\nModules for each type:\n{'module_test': 'module_test'}\nINFO:f90wrap.transform:adding missing constructor for real_array\nINFO:f90wrap.transform:adding missing destructor for real_array\nINFO:f90wrap.transform:visiting Module(name=module_test) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=real_array) found 1 constructors with names: ['real_array_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module module_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type real_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine real_array_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine real_array_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine testf\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module module_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type real_array\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine real_array_initialise call_name real_array_initialise mod_name 'module_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine real_array_finalise call_name real_array_finalise mod_name 'module_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine testf call_name testf mod_name 'module_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _module_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": " This is received in fortran :    1.00000000       1.00000000       1.00000000       1.00000000       1.00000000       1.00000000    \n This is sent back to python :    1.00000000       1.00000000       1.00000000       4.00000000       1.00000000       1.00000000    \nThis is the freshly allocated array : [-2.884456e+32  4.559405e-41 -2.884456e+32  4.559405e-41  0.000000e+00\n  0.000000e+00]\nThis is sent to fortran : [1. 1. 1. 1. 1. 1.]\nThis is received by python : [1. 1. 1. 4. 1. 1.]\n",
      "test_error": ""
    },
    {
      "name": "auto_raise_error",
      "path": "/home/ert/code/f90wrap/examples/auto_raise_error",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_error.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_error.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_error as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=m_error) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_error\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine no_error_var\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine auto_raise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine auto_no_raise_optional\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine auto_raise_optional\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine auto_no_raise\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_error\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine no_error_var call_name no_error_var mod_name 'm_error'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine auto_raise call_name auto_raise mod_name 'm_error'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine auto_no_raise_optional call_name auto_no_raise_optional mod_name 'm_error'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine auto_raise_optional call_name auto_raise_optional mod_name 'm_error'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine auto_no_raise call_name auto_no_raise mod_name 'm_error'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_error.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ".....\n----------------------------------------------------------------------\nRan 5 tests in 0.000s\n\nOK\n"
    },
    {
      "name": "callback_print_function_issue93",
      "path": "/home/ert/code/f90wrap/examples/callback_print_function_issue93",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['cback.fpp', 'caller.fpp']",
        "Callbacks: ['pyfunc_print', 'pyfunc_return']",
        "Generated C: ['_cback.c']",
        "Wrapper sources: ['f90wrap_caller.f90', 'f90wrap_cback.f90']",
        "Compilation order: ['cback_pp.f90', 'caller_pp.f90', 'f90wrap_caller.f90', 'f90wrap_cback.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _cback.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['cback.fpp', 'caller.fpp'] ...\nINFO:f90wrap.parser:marking module cback as default public\nINFO:f90wrap.parser:marking module caller as default public\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=cback) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Module(name=caller) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module cback\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_message\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module caller\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine test_write_msg\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine test_write_msg_2\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module cback\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_message call_name write_message mod_name 'cback'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module caller\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine test_write_msg call_name test_write_msg mod_name 'caller'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine test_write_msg_2 call_name test_write_msg_2 mod_name 'caller'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _cback.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "\nwrite_message(msg)\nDefined at cback.fpp lines 9-13\n\nParameters\n----------\nmsg : str\n\nYo! blah\u0000U\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000.mo\u0000\u0000\u0000\u0000\u0000A\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0005\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0005\u00ff\u00ff\u00ff\u0003\u00ff\b\u0004\u00ff\u00ff\u000b\u00ff\u00ff\u00ff\u00ff\u0002\u0007\u00ff\u00ff\t\u00ff\u00ff\u0001\u00ff\u00ff\n\u00ff\u00ff\u00ff\u0006 d\u00a8\u00fc\u0000\u0000\u0000\u0000P\u00d1\u00ae\u001b\u000e\u007f\u0000\u0000\u00e0YO]\u00faU\u0000\u0000\u00b8\u008bj\u00ce\u009c\u00ea(m\u0010\b\u009b\u001a\u000e\u007f\u0000\u0000\u00e0YO]\u00faU\u0000\u0000\u00d1\u00de\u00cf_\u00ca\u0094\u009f\u00e3p\u00fb\u0099\u001a\u000e\u007f\u0000\u0000\u00d0`O]\u00faU\u0000\u0000\u0006E\u00e1\u00cf ?N\u00edp:\u00b6\u001a\u000e\u007f\u0000\u0000\u00c0gO]\u00faU\u0000\u0000F\n\u00da\u0081c\u00cd\u00aa\u009005\u00b9\u001a\u000e\u007f\u0000\u0000\u00b0nO]\u00faU\u0000\u0000B\u0090\u00ca/\u0010\u00e1\u00d4\u00f7\u00b8\u0018\u00b0\u001b\u000e\u007f\u0000\u0000\u00a0uO]\u00faU\u0000\u0000\u00ff\u00e1\u0004\u00dd\u0001@{\u00a3p\u0088\u009b\u001a\u000e\u007f\u0000\u0000\u0090|O]\u00faU\u0000\u00008c\u009e\u00aa\u0019y\u00cd\u00bb\u00b8)\u00b0\u001b\u000e\u007f\u0000\u0000\u0080\u0083O]\u00faU\u0000\u0000H\u00d9\u0015q\u00da\u009b\u00bd\u00e4\u00b0\u00e2\u00d2\u001a\u000e\u007f\u0000\u0000p\u008aO]\u00faU\u0000\u0000?\u009f\u00bb\u0097\u00b0\u000b\u00d3a\u00c8y\u00b0\u001b\u000e\u007f\u0000\u0000`\u0097O]\u00faU\u0000\u0000\u0002j\u0014\u00ed\u000bR\u00d9\u00e3@\b\u009b\u001a\u000e\u007f\u0000\u00000\u00a2O]\u00faU\u0000\u0000\u00ac\u0091OM\u001c{\u00c9\u00b3h4\u00b0\u001b\u000e\u007f\u0000\u0000 \u00a9O]\u00faU\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000A\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0005\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0005\u00ff\u00ff\u00ff\u0003\u00ff\b\u0004\u00ff\u00ff\u000b\u00ff\u00ff\u00ff\u00ff\u0002\u0007\u00ff\u00ff\t\u00ff\u00ff\u0001\u00ff\u00ff\n\u00ff\u00ff\u00ff\u0006 d\u00a8\u00fc\u0000\u0000\u0000\u0000P\u00d1\u00ae\u001b\u000e\u007f\u0000\u0000\u00e0YO]\u00faU\u0000\u0000\u00b8\u008bj\u00ce\u009c\u00ea(m\u0010\b\u009b\u001a\u000e\u007f\u0000\u0000\u00e0YO]\u00faU\u0000\u0000\u00d1\u00de\u00cf_\u00ca\u0094\u009f\u00e3p\u00fb\u0099\u001a\u000e\u007f\u0000\u0000\u00d0`O]\u00faU\u0000\u0000\u0006E\u00e1\u00cf ?N\u00edp:\u00b6\u001a\u000e\u007f\u0000\u0000\u00c0gO]\u00faU\u0000\u0000F\n\u00da\u0081c\u00cd\u00aa\u009005\u00b9\u001a\u000e\u007f\u0000\u0000\u00b0nO]\u00faU\u0000\u0000B\u0090\u00ca/\u0010\u00e1\u00d4\u00f7\u00b8\u0018\u00b0\u001b\u000e\u007f\u0000\u0000\u00a0uO]\u00faU\u0000\u0000\u00ff\u00e1\u0004\u00dd\u0001@{\u00a3p\u0088\u009b\u001a\u000e\u007f\u0000\u0000\u0090|O]\u00faU\u0000\u00008c\u009e\u00aa\u0019y\u00cd\u00bb\u00b8)\u00b0\u001b\u000e\u007f\u0000\u0000\u0080\u0083O]\u00faU\u0000\u0000H\u00d9\u0015q\u00da\u009b\u00bd\u00e4\u00b0\u00e2\u00d2\u001a\u000e\u007f\u0000\u0000p\u008aO]\u00faU\u0000\u0000?\u009f\u00bb\u0097\u00b0\u000b\u00d3a\u00c8y\u00b0\u001b\u000e\u007f\u0000\u0000`\u0097O]\u00faU\u0000\u0000\u0002j\u0014\u00ed\u000bR\u00d9\u00e3@\b\u009b\u001a\u000e\u007f\u0000\u00000\u00a2O]\u00faU\u0000\u0000\u00ac\u0091OM\u001c{\u00c9\u00b3h4\u00b0\u001b\u000e\u007f\u0000\u0000 \u00a9O]\u00faU\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\nYo! from test_write_msg\nYo! from test_write_msg\nYo! from test_write_msg_2\n",
      "test_error": ".\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n"
    },
    {
      "name": "class_names",
      "path": "/home/ert/code/f90wrap/examples/class_names",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_module_snake_mod.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _module_snake_mod.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:parser reading type ceci_ne_pas_un_chameau\nINFO:f90wrap.parser:parser reading type array_type\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'array_type': Type(name=array_type),\n 'ceci_ne_pas_un_chameau': Type(name=ceci_ne_pas_un_chameau),\n 'class(array_type)': Type(name=array_type),\n 'class(ceci_ne_pas_un_chameau)': Type(name=ceci_ne_pas_un_chameau),\n 'type(array_type)': Type(name=array_type),\n 'type(ceci_ne_pas_un_chameau)': Type(name=ceci_ne_pas_un_chameau)}\n\nClass name mapping:\n{'array_type': 'array_type',\n 'ceci_ne_pas_un_chameau': 'ceci_ne_pas_un_chameau',\n 'class(array_type)': 'array_type',\n 'class(ceci_ne_pas_un_chameau)': 'ceci_ne_pas_un_chameau',\n 'type(array_type)': 'array_type',\n 'type(ceci_ne_pas_un_chameau)': 'ceci_ne_pas_un_chameau'}\nModules for each type:\n{'module_snake_mod': 'module_snake_mod'}\nINFO:f90wrap.transform:adding missing constructor for ceci_ne_pas_un_chameau\nINFO:f90wrap.transform:adding missing constructor for array_type\nINFO:f90wrap.transform:adding missing destructor for ceci_ne_pas_un_chameau\nINFO:f90wrap.transform:adding missing destructor for array_type\nINFO:f90wrap.transform:visiting Module(name=module_snake_mod) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=ceci_ne_pas_un_chameau) found 1 constructors with names: ['ceci_ne_pas_un_chameau_initialise']\nINFO:f90wrap.transform:visiting Type(name=array_type) found 1 constructors with names: ['array_type_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module module_snake_mod\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type ceci_ne_pas_un_chameau\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine ceci_ne_pas_un_chameau_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine ceci_ne_pas_un_chameau_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type array_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_type_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_type_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine recup_point\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module module_snake_mod\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type ceci_ne_pas_un_chameau\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine ceci_ne_pas_un_chameau_initialise call_name ceci_ne_pas_un_chameau_initialise mod_name 'module_snake_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine ceci_ne_pas_un_chameau_finalise call_name ceci_ne_pas_un_chameau_finalise mod_name 'module_snake_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type array_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_type_initialise call_name array_type_initialise mod_name 'module_snake_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_type_finalise call_name array_type_finalise mod_name 'module_snake_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine recup_point call_name recup_point mod_name 'module_snake_mod'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _module_snake_mod.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "cylinder",
      "path": "/home/ert/code/f90wrap/examples/cylinder",
      "status": "FAIL",
      "error_category": "no_c_output",
      "notes": [
        "f90wrap inputs: ['.fpp']",
        "No Direct-C source generated"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char', '1': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'2': 'int', '4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dbl_ad': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float',\n          'sng_ad': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "default_i8",
      "path": "/home/ert/code/f90wrap/examples/default_i8",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_my_module.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _my_module.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'': 'long_long', '4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:parser reading type mytype\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(mytype)': Type(name=mytype),\n 'mytype': Type(name=mytype),\n 'type(mytype)': Type(name=mytype)}\n\nClass name mapping:\n{'class(mytype)': 'mytype', 'mytype': 'mytype', 'type(mytype)': 'mytype'}\nModules for each type:\n{'my_module': 'my_module'}\nINFO:f90wrap.transform:adding missing constructor for mytype\nINFO:f90wrap.transform:adding missing destructor for mytype\nINFO:f90wrap.transform:visiting Module(name=my_module) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=mytype) found 1 constructors with names: ['mytype_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module my_module\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type mytype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine allocit\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module my_module\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type mytype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_initialise call_name mytype_initialise mod_name 'my_module'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_finalise call_name mytype_finalise mod_name 'my_module'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine allocit call_name allocit mod_name 'my_module'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _my_module.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": " allocit> n,m=           1           2\n allocit> n,m=          10          20\n allocit> n,m=          50          99\nn,m= 1 2\nsum =         1.6666666865  .... x.y[1,2] =         1.0000000000 \n\nn,m= 10 20\nsum =       106.6666675732  .... x.y[10,20] =         1.0000000000 \n\nn,m= 50 99\nsum =      2508.2214786243  .... x.y[50,99] =         1.0000000000 \n\n",
      "test_error": "...\n----------------------------------------------------------------------\nRan 3 tests in 0.005s\n\nOK\n"
    },
    {
      "name": "derived-type-aliases",
      "path": "/home/ert/code/f90wrap/examples/derived-type-aliases",
      "status": "FAIL",
      "error_category": "syntax_error",
      "notes": [
        "f90wrap inputs: ['mytype_mod.f90', 'othertype_mod.f90']",
        "Generated C: ['_mytype_mod.c']",
        "Wrapper sources: ['f90wrap_mytype_mod.f90', 'f90wrap_othertype_mod.f90']",
        "Compilation order: ['mytype_mod_pp.f90', 'f90wrap_mytype_mod.f90', 'othertype_mod_pp.f90', 'f90wrap_othertype_mod.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _mytype_mod.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py failed (rc=1)"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['mytype_mod.f90', 'othertype_mod.f90'] ...\nINFO:f90wrap.parser:parser reading type mytype\nINFO:f90wrap.parser:parser reading type othertype\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(mytype)': Type(name=mytype),\n 'class(othertype)': Type(name=othertype),\n 'mytype': Type(name=mytype),\n 'othertype': Type(name=othertype),\n 'type(mytype)': Type(name=mytype),\n 'type(othertype)': Type(name=othertype)}\n\nClass name mapping:\n{'class(mytype)': 'mytype',\n 'class(othertype)': 'othertype',\n 'mytype': 'mytype',\n 'othertype': 'othertype',\n 'type(mytype)': 'mytype',\n 'type(othertype)': 'othertype'}\nModules for each type:\n{'mytype_mod': 'mytype_mod', 'othertype_mod': 'othertype_mod'}\nINFO:f90wrap.transform:adding missing constructor for mytype\nINFO:f90wrap.transform:adding missing constructor for othertype\nINFO:f90wrap.transform:adding missing destructor for mytype\nINFO:f90wrap.transform:adding missing destructor for othertype\nINFO:f90wrap.transform:visiting Module(name=mytype_mod) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=mytype) found 1 constructors with names: ['mytype_initialise']\nINFO:f90wrap.transform:visiting Module(name=othertype_mod) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=othertype) found 1 constructors with names: ['othertype_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module mytype_mod\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type mytype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine constructor\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine plus_b\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module othertype_mod\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type othertype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine othertype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine othertype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine constructor\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine plus_b\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module mytype_mod\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type mytype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_initialise call_name mytype_initialise mod_name 'mytype_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_finalise call_name mytype_finalise mod_name 'mytype_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine constructor call_name constructor mod_name 'mytype_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine plus_b call_name plus_b mod_name 'mytype_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module othertype_mod\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type othertype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine othertype_initialise call_name othertype_initialise mod_name 'othertype_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine othertype_finalise call_name othertype_finalise mod_name 'othertype_mod'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _mytype_mod.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "  File \"/tmp/tmpp9n_jgwy/tests.py\", line 1\n    from derived-type-aliases_direct import mytype_mod\n                ^\nSyntaxError: invalid syntax\n"
    },
    {
      "name": "derivedtypes",
      "path": "/home/ert/code/f90wrap/examples/derivedtypes",
      "status": "FAIL",
      "error_category": "attribute_error",
      "notes": [
        "f90wrap inputs: ['datatypes.fpp', 'library.fpp', 'parameters.fpp']",
        "Generated C: ['_datatypes_allocatable.c']",
        "Wrapper sources: ['f90wrap_datatypes.f90', 'f90wrap_library.f90', 'f90wrap_parameters.f90']",
        "Compilation order: ['parameters_pp.f90', 'datatypes_pp.f90', 'f90wrap_datatypes.f90', 'f90wrap_parameters.f90', 'library_pp.f90', 'f90wrap_library.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _datatypes_allocatable.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py failed (rc=1)"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char', '1': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['datatypes.fpp', 'library.fpp', 'parameters.fpp'] ...\nINFO:f90wrap.parser:parser reading type alloc_arrays\nINFO:f90wrap.parser:parser reading type different_types\nINFO:f90wrap.parser:parser reading type fixed_shape_arrays\nINFO:f90wrap.parser:parser reading type nested\nINFO:f90wrap.parser:parser reading type pointer_arrays\nINFO:f90wrap.parser:parser reading type alloc_arrays_2\nINFO:f90wrap.parser:parser reading type array_nested\nINFO:f90wrap.parser:marking module parameters as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'alloc_arrays': Type(name=alloc_arrays),\n 'alloc_arrays_2': Type(name=alloc_arrays_2),\n 'array_nested': Type(name=array_nested),\n 'class(alloc_arrays)': Type(name=alloc_arrays),\n 'class(alloc_arrays_2)': Type(name=alloc_arrays_2),\n 'class(array_nested)': Type(name=array_nested),\n 'class(different_types)': Type(name=different_types),\n 'class(fixed_shape_arrays)': Type(name=fixed_shape_arrays),\n 'class(nested)': Type(name=nested),\n 'class(pointer_arrays)': Type(name=pointer_arrays),\n 'different_types': Type(name=different_types),\n 'fixed_shape_arrays': Type(name=fixed_shape_arrays),\n 'nested': Type(name=nested),\n 'pointer_arrays': Type(name=pointer_arrays),\n 'type(alloc_arrays)': Type(name=alloc_arrays),\n 'type(alloc_arrays_2)': Type(name=alloc_arrays_2),\n 'type(array_nested)': Type(name=array_nested),\n 'type(different_types)': Type(name=different_types),\n 'type(fixed_shape_arrays)': Type(name=fixed_shape_arrays),\n 'type(nested)': Type(name=nested),\n 'type(pointer_arrays)': Type(name=pointer_arrays)}\n\nClass name mapping:\n{'alloc_arrays': 'alloc_arrays',\n 'alloc_arrays_2': 'alloc_arrays_2',\n 'array_nested': 'array_nested',\n 'class(alloc_arrays)': 'alloc_arrays',\n 'class(alloc_arrays_2)': 'alloc_arrays_2',\n 'class(array_nested)': 'array_nested',\n 'class(different_types)': 'different_types',\n 'class(fixed_shape_arrays)': 'fixed_shape_arrays',\n 'class(nested)': 'nested',\n 'class(pointer_arrays)': 'pointer_arrays',\n 'different_types': 'different_types',\n 'fixed_shape_arrays': 'fixed_shape_arrays',\n 'nested': 'nested',\n 'pointer_arrays': 'pointer_arrays',\n 'type(alloc_arrays)': 'alloc_arrays',\n 'type(alloc_arrays_2)': 'alloc_arrays_2',\n 'type(array_nested)': 'array_nested',\n 'type(different_types)': 'different_types',\n 'type(fixed_shape_arrays)': 'fixed_shape_arrays',\n 'type(nested)': 'nested',\n 'type(pointer_arrays)': 'pointer_arrays'}\nModules for each type:\n{'datatypes': 'datatypes', 'datatypes_allocatable': 'datatypes_allocatable'}\nWARNING:f90wrap.transform:removing routine return_array_nested due to derived type array argument : dt_array -- currently, only fixed-lengh one-dimensional arrays of derived type are supported\nINFO:f90wrap.transform:adding missing constructor for alloc_arrays\nINFO:f90wrap.transform:adding missing constructor for different_types\nINFO:f90wrap.transform:adding missing constructor for fixed_shape_arrays\nINFO:f90wrap.transform:adding missing constructor for nested\nINFO:f90wrap.transform:adding missing constructor for pointer_arrays\nINFO:f90wrap.transform:adding missing constructor for alloc_arrays_2\nINFO:f90wrap.transform:adding missing constructor for array_nested\nINFO:f90wrap.transform:adding missing destructor for alloc_arrays\nINFO:f90wrap.transform:adding missing destructor for different_types\nINFO:f90wrap.transform:adding missing destructor for fixed_shape_arrays\nINFO:f90wrap.transform:adding missing destructor for nested\nINFO:f90wrap.transform:adding missing destructor for pointer_arrays\nINFO:f90wrap.transform:adding missing destructor for alloc_arrays_2\nINFO:f90wrap.transform:adding missing destructor for array_nested\nINFO:f90wrap.transform:visiting Module(name=datatypes_allocatable) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=alloc_arrays) found 1 constructors with names: ['alloc_arrays_initialise']\nINFO:f90wrap.transform:visiting Module(name=datatypes) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=different_types) found 1 constructors with names: ['different_types_initialise']\nINFO:f90wrap.transform:visiting Type(name=fixed_shape_arrays) found 1 constructors with names: ['fixed_shape_arrays_initialise']\nINFO:f90wrap.transform:visiting Type(name=nested) found 1 constructors with names: ['nested_initialise']\nINFO:f90wrap.transform:visiting Type(name=pointer_arrays) found 1 constructors with names: ['pointer_arrays_initialise']\nINFO:f90wrap.transform:visiting Type(name=alloc_arrays_2) found 1 constructors with names: ['alloc_arrays_2_initialise']\nINFO:f90wrap.transform:visiting Type(name=array_nested) found 1 constructors with names: ['array_nested_initialise']\nINFO:f90wrap.transform:visiting Module(name=library) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Module(name=parameters) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module datatypes_allocatable\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type alloc_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_arrays_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_arrays_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine init_alloc_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine destroy_alloc_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module datatypes\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type different_types\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine different_types_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine different_types_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type fixed_shape_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine fixed_shape_arrays_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine fixed_shape_arrays_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type nested\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine nested_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine nested_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type pointer_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine pointer_arrays_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine pointer_arrays_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type alloc_arrays_2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_arrays_2_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_arrays_2_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type array_nested\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_nested_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_nested_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine init_array_nested\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine destroy_array_nested\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module library\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_value_sub\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine modify_dertype_fixed_shape_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine do_array_stuff\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_a_dt_func\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine modify_dertype_alloc_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine modify_derived_types\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_dertype_pointer_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine set_derived_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_dertype_alloc_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine only_manipulate\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_value_func\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine modify_dertype_pointer_arrays\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module parameters\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module datatypes_allocatable\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type alloc_arrays\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_arrays_initialise call_name alloc_arrays_initialise mod_name 'datatypes_allocatable'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_arrays_finalise call_name alloc_arrays_finalise mod_name 'datatypes_allocatable'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine init_alloc_arrays call_name init_alloc_arrays mod_name 'datatypes_allocatable'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine destroy_alloc_arrays call_name destroy_alloc_arrays mod_name 'datatypes_allocatable'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module datatypes\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type different_types\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine different_types_initialise call_name different_types_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine different_types_finalise call_name different_types_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type fixed_shape_arrays\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine fixed_shape_arrays_initialise call_name fixed_shape_arrays_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine fixed_shape_arrays_finalise call_name fixed_shape_arrays_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type nested\nWARNING:f90wrap.f90wrapgen:oh no\nWARNING:f90wrap.f90wrapgen:oh no\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine nested_initialise call_name nested_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine nested_finalise call_name nested_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type pointer_arrays\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine pointer_arrays_initialise call_name pointer_arrays_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine pointer_arrays_finalise call_name pointer_arrays_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type alloc_arrays_2\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_arrays_2_initialise call_name alloc_arrays_2_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_arrays_2_finalise call_name alloc_arrays_2_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type array_nested\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_nested_initialise call_name array_nested_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_nested_finalise call_name array_nested_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine init_array_nested call_name init_array_nested mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine destroy_array_nested call_name destroy_array_nested mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module library\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_value_sub call_name return_value_sub mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine modify_dertype_fixed_shape_arrays call_name modify_dertype_fixed_shape_arrays mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine do_array_stuff call_name do_array_stuff mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_a_dt_func call_name return_a_dt_func mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine modify_dertype_alloc_arrays call_name modify_dertype_alloc_arrays mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine modify_derived_types call_name modify_derived_types mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_dertype_pointer_arrays call_name return_dertype_pointer_arrays mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine set_derived_type call_name set_derived_type mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_dertype_alloc_arrays call_name return_dertype_alloc_arrays mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine only_manipulate call_name only_manipulate mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_value_func call_name return_value_func mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine modify_dertype_pointer_arrays call_name modify_dertype_pointer_arrays mod_name 'library'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module parameters\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _datatypes_allocatable.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "/home/ert/code/f90wrap/f90wrap/f90wrapgen.py:175: UserWarning: Source file datatypes.fpp contains code for more than one module!\n  warnings.warn(\n",
      "test_output": "",
      "test_error": ".EEException ignored in: <function Datatypes.array_nested.__del__ at 0x7ff9e2faab60>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 851, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__array_nested_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__array_nested_finalise'\nException ignored in: <function Datatypes.different_types.__del__ at 0x7ff9e2fa8ea0>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 241, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__different_types_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__different_types_finalise'\n.EEEE.E.E..E..\n======================================================================\nERROR: test_copy_nested_alloc_arrays (__main__.LibTests.test_copy_nested_alloc_arrays)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 315, in test_copy_nested_alloc_arrays\n    dt = self.lib.datatypes.array_nested()\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 833, in __init__\n    f90wrap.runtime.FortranDerivedType.__init__(self)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^\n  File \"/home/ert/code/f90wrap/f90wrap/fortrantype.py\", line 71, in __init__\n    init_array(self)\n    ~~~~~~~~~~^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 855, in init_array_xi\n    _datatypes_allocatable.f90wrap_array_nested__array_getitem__xi,\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_array_nested__array_getitem__xi'\n\n======================================================================\nERROR: test_modify_derived_types (__main__.LibTests.test_modify_derived_types)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 158, in test_modify_derived_types\n    dt1 = self.lib.datatypes.different_types()\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 224, in __init__\n    result = _datatypes_allocatable.f90wrap_datatypes__different_types_initialise()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__different_types_initialise'\n\n======================================================================\nERROR: test_modify_dertype_multiple_arrays (__main__.LibTests.test_modify_dertype_multiple_arrays)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 184, in test_modify_dertype_multiple_arrays\n    self.assertEqual(dt.eta.dtype, np.int32)\n                     ^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 340, in eta\n    _datatypes_allocatable.f90wrap_fixed_shape_arrays__array__eta(self._handle)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_fixed_shape_arrays__array__eta'\n\n======================================================================\nERROR: test_modify_dertype_pointer_arrays (__main__.LibTests.test_modify_dertype_pointer_arrays)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 249, in test_modify_dertype_pointer_arrays\n    dt.chi_shape = np.array([m, n], dtype=np.int32)\n    ^^^^^^^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 618, in chi_shape\n    self.chi_shape[...] = chi_shape\n    ^^^^^^^^^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 602, in chi_shape\n    _datatypes_allocatable.f90wrap_pointer_arrays__array__chi_shape(self._handle)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_pointer_arrays__array__chi_shape'. Did you mean: 'f90wrap_alloc_arrays__array__chi_shape'?\n\n======================================================================\nERROR: test_nested_alloc_arrays (__main__.LibTests.test_nested_alloc_arrays)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 305, in test_nested_alloc_arrays\n    dt = self.lib.datatypes.array_nested()\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 833, in __init__\n    f90wrap.runtime.FortranDerivedType.__init__(self)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^\n  File \"/home/ert/code/f90wrap/f90wrap/fortrantype.py\", line 71, in __init__\n    init_array(self)\n    ~~~~~~~~~~^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 855, in init_array_xi\n    _datatypes_allocatable.f90wrap_array_nested__array_getitem__xi,\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_array_nested__array_getitem__xi'\n\n======================================================================\nERROR: test_nested_dertype (__main__.LibTests.test_nested_dertype)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 213, in test_nested_dertype\n    ndt = self.lib.datatypes.nested()\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 439, in __init__\n    result = _datatypes_allocatable.f90wrap_datatypes__nested_initialise()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__nested_initialise'\n\n======================================================================\nERROR: test_return_a_dt_func (__main__.LibTests.test_return_a_dt_func)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 108, in test_return_a_dt_func\n    self.assertEqual(dt.alpha, 1) # logicals, so 1/0 instead of T/F\n                     ^^^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 249, in alpha\n    return _datatypes_allocatable.f90wrap_different_types__get__alpha(self._handle)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_different_types__get__alpha'\n\n======================================================================\nERROR: test_return_dertype_pointer_arrays (__main__.LibTests.test_return_dertype_pointer_arrays)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 225, in test_return_dertype_pointer_arrays\n    np.testing.assert_allclose(dt.chi, expected)\n                               ^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 554, in chi\n    _datatypes_allocatable.f90wrap_pointer_arrays__array__chi(self._handle)\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_pointer_arrays__array__chi'. Did you mean: 'f90wrap_alloc_arrays__array__chi'?\n\n======================================================================\nERROR: test_set_derived_type (__main__.LibTests.test_set_derived_type)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/tests.py\", line 153, in test_set_derived_type\n    self.assertEqual(dt.beta, dt_beta)\n                     ^^^^^^^\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 261, in beta\n    return _datatypes_allocatable.f90wrap_different_types__get__beta(self._handle)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_different_types__get__beta'\n\n----------------------------------------------------------------------\nRan 17 tests in 0.121s\n\nFAILED (errors=9)\nException ignored in: <function Datatypes.fixed_shape_arrays.__del__ at 0x7ff9e2fa9440>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 331, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__fixed_shape_arrays_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__fixed_shape_arrays_finalise'\nException ignored in: <function Datatypes.pointer_arrays.__del__ at 0x7ff9e2fa9e40>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 545, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__pointer_arrays_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__pointer_arrays_finalise'\nException ignored in: <function Datatypes.array_nested.__del__ at 0x7ff9e2faab60>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 851, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__array_nested_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__array_nested_finalise'\nException ignored in: <function Datatypes.nested.__del__ at 0x7ff9e2fa99e0>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 456, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__nested_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__nested_finalise'\nException ignored in: <function Datatypes.different_types.__del__ at 0x7ff9e2fa8ea0>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 241, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__different_types_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__different_types_finalise'\nException ignored in: <function Datatypes.pointer_arrays.__del__ at 0x7ff9e2fa9e40>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 545, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__pointer_arrays_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__pointer_arrays_finalise'\nException ignored in: <function Datatypes.different_types.__del__ at 0x7ff9e2fa8ea0>\nTraceback (most recent call last):\n  File \"/tmp/tmpkjljwlw6/derivedtypes_direct.py\", line 241, in __del__\n    _datatypes_allocatable.f90wrap_datatypes__different_types_finalise(this=self._handle)\nAttributeError: module '_datatypes_allocatable' has no attribute 'f90wrap_datatypes__different_types_finalise'\n"
    },
    {
      "name": "derivedtypes_procedure",
      "path": "/home/ert/code/f90wrap/examples/derivedtypes_procedure",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['library.fpp']",
        "Generated C: ['_test.c']",
        "Wrapper sources: ['f90wrap_library.f90']",
        "Compilation order: ['library_pp.f90', 'f90wrap_library.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _test.c: _test.c: In function \u2018wrap__test_test_asum_class\u2019:\n_test.c:91:10: error: \u2018self\u2019 redeclared as different kind of symbol\n   91 |     int* self = (int*)malloc(sizeof(int) * self_handle_len);\n      |          ^~~~\n_test.c:52:55: note: previous definition of \u2018self\u2019 with type \u2018PyObject *\u2019 {aka \u2018struct _object *\u2019}\n   52 | static PyObject* wrap__test_test_asum_class(PyObject* self, PyObject* args, PyObject* kwargs)\n      |                                             ~~~~~~~~~~^~~~\n_test.c: In function \u2018"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['library.fpp'] ...\nINFO:f90wrap.parser:marking module test as default private\nINFO:f90wrap.parser:parser reading type atype\nINFO:f90wrap.parser:parser reading type btype\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'atype': Type(name=atype),\n 'btype': Type(name=btype),\n 'class(atype)': Type(name=atype),\n 'class(btype)': Type(name=btype),\n 'type(atype)': Type(name=atype),\n 'type(btype)': Type(name=btype)}\n\nClass name mapping:\n{'atype': 'atype',\n 'btype': 'btype',\n 'class(atype)': 'atype',\n 'class(btype)': 'btype',\n 'type(atype)': 'atype',\n 'type(btype)': 'btype'}\nModules for each type:\n{'test': 'test'}\nINFO:f90wrap.transform:adding missing constructor for atype\nINFO:f90wrap.transform:adding missing constructor for btype\nINFO:f90wrap.transform:adding missing destructor for atype\nINFO:f90wrap.transform:adding missing destructor for btype\nINFO:f90wrap.transform:visiting Module(name=test) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=atype) found 1 constructors with names: ['atype_initialise']\nINFO:f90wrap.transform:visiting Type(name=btype) found 1 constructors with names: ['btype_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine atype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine atype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine p_create__binding__atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine p_asum__binding__atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine p_asum_2__binding__atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine asum_class__binding__atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine p_reset__binding__atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting generic binding assignment(=)\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type btype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine btype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine btype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine p_asum__binding__btype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine asum_class\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine asum\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine create\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type atype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine atype_initialise call_name atype_initialise mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine atype_finalise call_name atype_finalise mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine p_create__binding__atype call_name p_create mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine p_asum__binding__atype call_name p_asum mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine p_asum_2__binding__atype call_name p_asum_2 mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine asum_class__binding__atype call_name asum_class mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine p_reset__binding__atype call_name p_reset mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type btype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine btype_initialise call_name btype_initialise mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine btype_finalise call_name btype_finalise mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine p_asum__binding__btype call_name p_asum mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine asum_class call_name asum_class mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine asum call_name asum mod_name 'test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine create call_name create mod_name 'test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "docstring",
      "path": "/home/ert/code/f90wrap/examples/docstring",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp', 'f90wrap_main.fpp']",
        "Generated C: ['_m_circle.c']",
        "Skipping duplicate wrapper f90wrap_main.f90",
        "Wrapper sources: ['f90wrap_docstring_direct.f90', 'f90wrap_main_pp.f90']",
        "Compilation order: ['f90wrap_docstring_direct.f90', 'main_pp.f90', 'f90wrap_main_pp.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_circle.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp', 'f90wrap_main.fpp'] ...\nINFO:f90wrap.parser:marking module m_circle as default private\nINFO:f90wrap.parser:parser reading type t_circle\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(t_circle)': Type(name=t_circle),\n 't_circle': Type(name=t_circle),\n 'type(t_circle)': Type(name=t_circle)}\n\nClass name mapping:\n{'class(t_circle)': 't_circle',\n 't_circle': 't_circle',\n 'type(t_circle)': 't_circle'}\nModules for each type:\n{'m_circle': 'm_circle'}\nINFO:f90wrap.transform:adding missing constructor for t_circle\nINFO:f90wrap.transform:adding missing destructor for t_circle\nINFO:f90wrap.transform:visiting Module(name=m_circle) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_circle) found 1 constructors with names: ['t_circle_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_circle_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_circle_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine no_direction\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine multiline_details\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine empty_lines_details\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine incomplete_doc_sub\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine function_2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine doc_inside\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine long_line_brief\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine details_with_parenthesis\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine construct_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine details_doc\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine construct_circle_more_doc\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine output_1\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_t_circle__get__radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_t_circle__set__radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__t_circle_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__t_circle_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__output_1\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__construct_circle_more_doc\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__details_doc\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__no_direction\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__details_with_parenthesis\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__multiline_details\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__construct_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__empty_lines_details\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__incomplete_doc_sub\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__doc_inside\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__function_2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_circle__long_line_brief\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_circle\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_circle\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_circle_initialise call_name t_circle_initialise mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_circle_finalise call_name t_circle_finalise mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine no_direction call_name no_direction mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine multiline_details call_name multiline_details mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine empty_lines_details call_name empty_lines_details mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine incomplete_doc_sub call_name incomplete_doc_sub mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine function_2 call_name function_2 mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine doc_inside call_name doc_inside mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine long_line_brief call_name long_line_brief mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine details_with_parenthesis call_name details_with_parenthesis mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine construct_circle call_name construct_circle mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine details_doc call_name details_doc mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine construct_circle_more_doc call_name construct_circle_more_doc mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine output_1 call_name output_1 mod_name 'm_circle'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_t_circle__get__radius call_name f90wrap_t_circle__get__radius mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_t_circle__set__radius call_name f90wrap_t_circle__set__radius mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__t_circle_initialise call_name f90wrap_m_circle__t_circle_initialise mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__t_circle_finalise call_name f90wrap_m_circle__t_circle_finalise mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__output_1 call_name f90wrap_m_circle__output_1 mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__construct_circle_more_doc call_name f90wrap_m_circle__construct_circle_more_doc mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__details_doc call_name f90wrap_m_circle__details_doc mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__no_direction call_name f90wrap_m_circle__no_direction mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__details_with_parenthesis call_name f90wrap_m_circle__details_with_parenthesis mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__multiline_details call_name f90wrap_m_circle__multiline_details mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__construct_circle call_name f90wrap_m_circle__construct_circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__empty_lines_details call_name f90wrap_m_circle__empty_lines_details mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__incomplete_doc_sub call_name f90wrap_m_circle__incomplete_doc_sub mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__doc_inside call_name f90wrap_m_circle__doc_inside mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__function_2 call_name f90wrap_m_circle__function_2 mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_circle__long_line_brief call_name f90wrap_m_circle__long_line_brief mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_circle.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "elemental",
      "path": "/home/ert/code/f90wrap/examples/elemental",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['elemental_module.fpp']",
        "Generated C: ['_elemental_module.c']",
        "Wrapper sources: ['f90wrap_elemental_module.f90']",
        "Compilation order: ['elemental_module_pp.f90', 'f90wrap_elemental_module.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _elemental_module.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char', '1': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['elemental_module.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=elemental_module) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module elemental_module\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine sinc\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module elemental_module\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine sinc call_name sinc mod_name 'elemental_module'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _elemental_module.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "errorbinding",
      "path": "/home/ert/code/f90wrap/examples/errorbinding",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['datatypes.fpp', 'parameters.fpp']",
        "Generated C: ['_datatypes.c']",
        "Wrapper sources: ['f90wrap_datatypes.f90', 'f90wrap_parameters.f90']",
        "Compilation order: ['parameters_pp.f90', 'datatypes_pp.f90', 'f90wrap_datatypes.f90', 'f90wrap_parameters.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _datatypes.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char', '1': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['datatypes.fpp', 'parameters.fpp'] ...\nINFO:f90wrap.parser:marking module datatypes as default private\nINFO:f90wrap.parser:parser reading type typewithprocedure\nINFO:f90wrap.parser:marking module parameters as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(typewithprocedure)': Type(name=typewithprocedure),\n 'type(typewithprocedure)': Type(name=typewithprocedure),\n 'typewithprocedure': Type(name=typewithprocedure)}\n\nClass name mapping:\n{'class(typewithprocedure)': 'typewithprocedure',\n 'type(typewithprocedure)': 'typewithprocedure',\n 'typewithprocedure': 'typewithprocedure'}\nModules for each type:\n{'datatypes': 'datatypes'}\nINFO:f90wrap.transform:adding missing constructor for typewithprocedure\nINFO:f90wrap.transform:adding missing destructor for typewithprocedure\nINFO:f90wrap.transform:visiting Module(name=datatypes) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=typewithprocedure) found 1 constructors with names: ['typewithprocedure_initialise']\nINFO:f90wrap.transform:visiting Module(name=parameters) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module datatypes\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type typewithprocedure\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine typewithprocedure_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine typewithprocedure_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine init__binding__typewithprocedure\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine info__binding__typewithprocedure\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine info_typewithprocedure\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine constructor_typewithprocedure\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module parameters\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module datatypes\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type typewithprocedure\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine typewithprocedure_initialise call_name typewithprocedure_initialise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine typewithprocedure_finalise call_name typewithprocedure_finalise mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine init__binding__typewithprocedure call_name init mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine info__binding__typewithprocedure call_name info mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine info_typewithprocedure call_name info_typewithprocedure mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine constructor_typewithprocedure call_name constructor_typewithprocedure mod_name 'datatypes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module parameters\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _datatypes.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "example2",
      "path": "/home/ert/code/f90wrap/examples/example2",
      "status": "SKIP",
      "error_category": null,
      "notes": [
        "No Fortran sources; skipping"
      ],
      "f90wrap_output": "",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "extends",
      "path": "/home/ert/code/f90wrap/examples/extends",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['testextends.fpp']",
        "Generated C: ['_testextends_mod.c']",
        "Wrapper sources: ['f90wrap_testextends.f90']",
        "Compilation order: ['testextends_pp.f90', 'f90wrap_testextends.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _testextends_mod.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['testextends.fpp'] ...\nINFO:f90wrap.parser:marking module testextends_mod as default public\nINFO:f90wrap.parser:parser reading type Superclass\nINFO:f90wrap.parser:parser reading type Subclass1\nINFO:f90wrap.parser:parser reading type Subclass2\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(subclass1)': Type(name=subclass1),\n 'class(subclass2)': Type(name=subclass2),\n 'class(superclass)': Type(name=superclass),\n 'subclass1': Type(name=subclass1),\n 'subclass2': Type(name=subclass2),\n 'superclass': Type(name=superclass),\n 'type(subclass1)': Type(name=subclass1),\n 'type(subclass2)': Type(name=subclass2),\n 'type(superclass)': Type(name=superclass)}\n\nClass name mapping:\n{'class(subclass1)': 'Subclass1',\n 'class(subclass2)': 'Subclass2',\n 'class(superclass)': 'Superclass',\n 'subclass1': 'Subclass1',\n 'subclass2': 'Subclass2',\n 'superclass': 'Superclass',\n 'type(subclass1)': 'Subclass1',\n 'type(subclass2)': 'Subclass2',\n 'type(superclass)': 'Superclass'}\nModules for each type:\n{'testextends_mod': 'testextends_mod'}\nINFO:f90wrap.transform:adding missing constructor for superclass\nINFO:f90wrap.transform:adding missing constructor for subclass1\nINFO:f90wrap.transform:adding missing constructor for subclass2\nINFO:f90wrap.transform:adding missing destructor for superclass\nINFO:f90wrap.transform:adding missing destructor for subclass1\nINFO:f90wrap.transform:adding missing destructor for subclass2\nINFO:f90wrap.transform:visiting Module(name=testextends_mod) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=superclass) found 1 constructors with names: ['superclass_initialise']\nINFO:f90wrap.transform:visiting Type(name=subclass1) found 1 constructors with names: ['subclass1_initialise']\nINFO:f90wrap.transform:visiting Type(name=subclass2) found 1 constructors with names: ['subclass2_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module testextends_mod\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type superclass\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine superclass_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine superclass_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type subclass1\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine subclass1_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine subclass1_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type subclass2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine subclass2_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine subclass2_finalise\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module testextends_mod\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type superclass\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine superclass_initialise call_name superclass_initialise mod_name 'testextends_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine superclass_finalise call_name superclass_finalise mod_name 'testextends_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type subclass1\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine subclass1_initialise call_name subclass1_initialise mod_name 'testextends_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine subclass1_finalise call_name subclass1_finalise mod_name 'testextends_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type subclass2\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine subclass2_initialise call_name subclass2_initialise mod_name 'testextends_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine subclass2_finalise call_name subclass2_finalise mod_name 'testextends_mod'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _testextends_mod.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "fixed_1D_derived_type_array_argument",
      "path": "/home/ert/code/f90wrap/examples/fixed_1D_derived_type_array_argument",
      "status": "FAIL",
      "error_category": "attribute_error",
      "notes": [
        "f90wrap inputs: ['functions.fpp']",
        "f90wrap failed (rc=2)"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['functions.fpp'] ...\nINFO:f90wrap.parser:parser reading type test_type2\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(test_type2)': Type(name=test_type2),\n 'test_type2': Type(name=test_type2),\n 'type(test_type2)': Type(name=test_type2)}\n\nClass name mapping:\n{'class(test_type2)': 'test_type2',\n 'test_type2': 'test_type2',\n 'type(test_type2)': 'test_type2'}\nModules for each type:\n{'test_module': 'test_module'}\nINFO:f90wrap.transform:adding missing constructor for test_type2\n",
      "f90wrap_error": "Traceback (most recent call last):\n  File \"/home/ert/code/f90wrap/f90wrap/scripts/main.py\", line 381, in main\n    tree = tf.transform_to_generic_wrapper(tree,\n                                           types,\n    ...<11 lines>...\n                                           remove_optional_arguments,\n                                           force_public=force_public)\n  File \"/home/ert/code/f90wrap/f90wrap/transform.py\", line 1399, in transform_to_generic_wrapper\n    tree = add_missing_constructors(tree)\n  File \"/home/ert/code/f90wrap/f90wrap/transform.py\", line 865, in add_missing_constructors\n    if 'abstract' in node.attributes:\n                     ^^^^^^^^^^^^^^^\nAttributeError: 'Type' object has no attribute 'attributes'\nf90wrap: AttributeError(\"'Type' object has no attribute 'attributes'\")\n         for help use --help\n",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "fortran_oo",
      "path": "/home/ert/code/f90wrap/examples/fortran_oo",
      "status": "FAIL",
      "error_category": "fortran_compilation_failed",
      "notes": [
        "f90wrap inputs: ['main-oo.fpp', 'f90wrap_main-oo.fpp', 'base_poly.fpp', 'f90wrap_base_poly.fpp']",
        "Generated C: ['_m_base_poly.c']",
        "Skipping duplicate wrapper f90wrap_base_poly.f90",
        "Skipping duplicate wrapper f90wrap_main-oo.f90",
        "Wrapper sources: ['f90wrap_base_poly_pp.f90', 'f90wrap_fortran_oo_direct.f90', 'f90wrap_main-oo_pp.f90']",
        "Compilation order: ['base_poly_pp.f90', 'f90wrap_base_poly_pp.f90', 'main-oo_pp.f90', 'f90wrap_fortran_oo_direct.f90', 'f90wrap_main-oo_pp.f90']",
        "Fortran compilation failed: f90wrap_fortran_oo_direct.f90:185:55:\n\n  185 |     call f90wrap_m_geometry__obj_name__binding__circle(obj_ptr%p%obj)\n      |                                                       1\nError: Explicit interface required for polymorphic argument at (1)\nf90wrap_fortran_oo_direct.f90:352:45:\n\n  352 |     call f90wrap_m_geometry__circle_obj_name(obj_ptr%p%obj)\n      |                                             1\nError: Explicit interface required for polymorphic argument at (1)\nf90wrap_main-oo_pp.f90:4",
        "Module dependency hints: main-oo_pp.f90: defines m_geometry, uses ['m_base_poly']; f90wrap_main-oo_pp.f90: uses ['m_geometry']; base_poly_pp.f90: defines m_base_poly; f90wrap_base_poly_pp.f90: uses ['m_base_poly']; f90wrap_fortran_oo_direct.f90: uses ['m_geometry']"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main-oo.fpp', 'f90wrap_main-oo.fpp', 'base_poly.fpp', 'f90wrap_base_poly.fpp'] ...\nINFO:f90wrap.parser:marking module m_geometry as default private\nINFO:f90wrap.parser:parser reading type Rectangle\nINFO:f90wrap.parser:parser reading type Square\nINFO:f90wrap.parser:parser reading type Circle\nINFO:f90wrap.parser:parser reading type Ball\nINFO:f90wrap.parser:marking module m_base_poly as default private\nINFO:f90wrap.parser:parser reading type Polygone\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'ball': Type(name=ball),\n 'circle': Type(name=circle),\n 'class(ball)': Type(name=ball),\n 'class(circle)': Type(name=circle),\n 'class(polygone)': Type(name=polygone),\n 'class(rectangle)': Type(name=rectangle),\n 'class(square)': Type(name=square),\n 'polygone': Type(name=polygone),\n 'rectangle': Type(name=rectangle),\n 'square': Type(name=square),\n 'type(ball)': Type(name=ball),\n 'type(circle)': Type(name=circle),\n 'type(polygone)': Type(name=polygone),\n 'type(rectangle)': Type(name=rectangle),\n 'type(square)': Type(name=square)}\n\nClass name mapping:\n{'ball': 'Ball',\n 'circle': 'Circle',\n 'class(ball)': 'Ball',\n 'class(circle)': 'Circle',\n 'class(polygone)': 'Polygone',\n 'class(rectangle)': 'Rectangle',\n 'class(square)': 'Square',\n 'polygone': 'Polygone',\n 'rectangle': 'Rectangle',\n 'square': 'Square',\n 'type(ball)': 'Ball',\n 'type(circle)': 'Circle',\n 'type(polygone)': 'Polygone',\n 'type(rectangle)': 'Rectangle',\n 'type(square)': 'Square'}\nModules for each type:\n{'m_base_poly': 'm_base_poly', 'm_geometry': 'm_geometry'}\nINFO:f90wrap.transform:setting call_name of construct_square to square\nINFO:f90wrap.transform:setting call_name of construct_circle to circle\nINFO:f90wrap.transform:setting call_name of construct_ball to ball\nINFO:f90wrap.transform:adding missing constructor for polygone\nINFO:f90wrap.transform:adding missing constructor for rectangle\nINFO:f90wrap.transform:found constructor construct_square\nINFO:f90wrap.transform:found constructor construct_circle\nINFO:f90wrap.transform:found constructor construct_ball\nINFO:f90wrap.transform:adding missing destructor for polygone\nINFO:f90wrap.transform:adding missing destructor for rectangle\nINFO:f90wrap.transform:adding missing destructor for square\nINFO:f90wrap.transform:found destructor circle_free\nINFO:f90wrap.transform:adding missing destructor for ball\nINFO:f90wrap.transform:visiting Module(name=m_base_poly) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=polygone) found 1 constructors with names: ['polygone_initialise']\nINFO:f90wrap.transform:visiting Module(name=m_geometry) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=rectangle) found 1 constructors with names: ['rectangle_initialise']\nINFO:f90wrap.transform:visiting Type(name=square) found 1 constructors with names: ['construct_square']\nINFO:f90wrap.transform:visiting Type(name=circle) found 1 constructors with names: ['construct_circle']\nINFO:f90wrap.transform:visiting Type(name=ball) found 1 constructors with names: ['construct_ball']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_base_poly\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type polygone\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine polygone_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine polygone_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_polygone__binding__polygone\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_geometry\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine rectangle_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine rectangle_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine perimeter__binding__rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_square__binding__rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine area__binding__rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_polygone__binding__polygone_rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine construct_square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine square_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_square__binding__square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine area__binding__square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine perimeter__binding__rectangle_square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_polygone__binding__polygone_rectangle_square\nINFO:f90wrap.transform:Renaming \"f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle_square\" to \"f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine construct_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine area__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine print__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine obj_name__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine copy__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine private_method__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine perimeter_4__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine perimeter_8__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting generic binding perimeter\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine circle_free__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine construct_ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine ball_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine volume__binding__ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine area__binding__ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine private_method__binding__ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine circle_obj_name\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine circle_print\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_ball_radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine ball_area\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine circle_free\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine circle_area\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine ball_volume\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_circle_radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine circle_copy\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_rectangle__get__length\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_rectangle__set__length\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_rectangle__get__width\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_rectangle__set__width\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__perimeter__binding__rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__is_square__binding__rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__area__binding__rectangle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone680c\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__construct_square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__square_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__is_square__binding__square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__area__binding__square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__perimeter__binding__rectangle_square\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_square\" to \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_sc576\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone71f2\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_circle__get__radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_circle__set__radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__construct_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__area__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__print__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__obj_name__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__copy__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__private_method__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__perimeter_4__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__perimeter_8__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__circle_free__binding__circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__construct_ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__ball_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__volume__binding__ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__area__binding__ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__private_method__binding__ball\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__circle_print\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__circle_free\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__ball_area\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__get_ball_radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__circle_copy\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__ball_volume\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__get_circle_radius\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__circle_obj_name\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__circle_area\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_geometry__get__pi\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine f90wrap_m_base_poly__is_polygone__binding__polygone\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_base_poly\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type polygone\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_polygone__binding__polygone call_name is_polygone mod_name 'm_base_poly'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_geometry\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type rectangle\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine perimeter__binding__rectangle call_name perimeter mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_square__binding__rectangle call_name is_square mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine area__binding__rectangle call_name area mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_polygone__binding__polygone_rectangle call_name is_polygone mod_name 'm_base_poly'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type square\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine construct_square call_name square mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine square_finalise call_name square_finalise mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_square__binding__square call_name is_square mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine area__binding__square call_name area mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine perimeter__binding__rectangle_square call_name perimeter mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_polygone__binding__polygone_rectangle_square call_name is_polygone mod_name 'm_base_poly'\nINFO:f90wrap.transform:Renaming \"f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle_square\" to \"f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type circle\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine construct_circle call_name circle mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine area__binding__circle call_name area mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine print__binding__circle call_name print mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine obj_name__binding__circle call_name obj_name mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine copy__binding__circle call_name copy mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine private_method__binding__circle call_name private_method mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine perimeter_4__binding__circle call_name perimeter_4 mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine perimeter_8__binding__circle call_name perimeter_8 mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine circle_free__binding__circle call_name circle_free mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type ball\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine construct_ball call_name ball mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine ball_finalise call_name ball_finalise mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine volume__binding__ball call_name volume mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine area__binding__ball call_name area mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine private_method__binding__ball call_name private_method mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine circle_obj_name call_name circle_obj_name mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine circle_print call_name circle_print mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_ball_radius call_name get_ball_radius mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine ball_area call_name ball_area mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine circle_free call_name circle_free mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine circle_area call_name circle_area mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine ball_volume call_name ball_volume mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_circle_radius call_name get_circle_radius mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine circle_copy call_name circle_copy mod_name 'm_geometry'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_rectangle__get__length call_name f90wrap_rectangle__get__length mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_rectangle__set__length call_name f90wrap_rectangle__set__length mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_rectangle__get__width call_name f90wrap_rectangle__get__width mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_rectangle__set__width call_name f90wrap_rectangle__set__width mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__perimeter__binding__rectangle call_name f90wrap_m_geometry__perimeter__binding__rectangle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__is_square__binding__rectangle call_name f90wrap_m_geometry__is_square__binding__rectangle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__area__binding__rectangle call_name f90wrap_m_geometry__area__binding__rectangle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle call_name f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle mod_name None\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone680c\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__construct_square call_name f90wrap_m_geometry__construct_square mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__square_finalise call_name f90wrap_m_geometry__square_finalise mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__is_square__binding__square call_name f90wrap_m_geometry__is_square__binding__square mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__area__binding__square call_name f90wrap_m_geometry__area__binding__square mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__perimeter__binding__rectangle_square call_name f90wrap_m_geometry__perimeter__binding__rectangle_square mod_name None\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_square\" to \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_sc576\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400 call_name f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400 mod_name None\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone71f2\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_circle__get__radius call_name f90wrap_circle__get__radius mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_circle__set__radius call_name f90wrap_circle__set__radius mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__construct_circle call_name f90wrap_m_geometry__construct_circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__area__binding__circle call_name f90wrap_m_geometry__area__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__print__binding__circle call_name f90wrap_m_geometry__print__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__obj_name__binding__circle call_name f90wrap_m_geometry__obj_name__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__copy__binding__circle call_name f90wrap_m_geometry__copy__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__private_method__binding__circle call_name f90wrap_m_geometry__private_method__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__perimeter_4__binding__circle call_name f90wrap_m_geometry__perimeter_4__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__perimeter_8__binding__circle call_name f90wrap_m_geometry__perimeter_8__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__circle_free__binding__circle call_name f90wrap_m_geometry__circle_free__binding__circle mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__construct_ball call_name f90wrap_m_geometry__construct_ball mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__ball_finalise call_name f90wrap_m_geometry__ball_finalise mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__volume__binding__ball call_name f90wrap_m_geometry__volume__binding__ball mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__area__binding__ball call_name f90wrap_m_geometry__area__binding__ball mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__private_method__binding__ball call_name f90wrap_m_geometry__private_method__binding__ball mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__circle_print call_name f90wrap_m_geometry__circle_print mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__circle_free call_name f90wrap_m_geometry__circle_free mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__ball_area call_name f90wrap_m_geometry__ball_area mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__get_ball_radius call_name f90wrap_m_geometry__get_ball_radius mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__circle_copy call_name f90wrap_m_geometry__circle_copy mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__ball_volume call_name f90wrap_m_geometry__ball_volume mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__get_circle_radius call_name f90wrap_m_geometry__get_circle_radius mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__circle_obj_name call_name f90wrap_m_geometry__circle_obj_name mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__circle_area call_name f90wrap_m_geometry__circle_area mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_geometry__get__pi call_name f90wrap_m_geometry__get__pi mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine f90wrap_m_base_poly__is_polygone__binding__polygone call_name f90wrap_m_base_poly__is_polygone__binding__polygone mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone680c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_square\" to \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_sc576\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone71f2\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone680c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_square\" to \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_sc576\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone71f2\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectangle\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone680c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_square\" to \"f90wrap_f90wrap_m_geometry__perimeter__binding__rectangle_sc576\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone_rectang5400\" to \"f90wrap_f90wrap_m_base_poly__is_polygone__binding__polygone71f2\" to comply with Fortran 2003\nINFO:root:Generated _m_base_poly.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "intent_out_size",
      "path": "/home/ert/code/f90wrap/examples/intent_out_size",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_intent_out.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_intent_out.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_intent_out as default public\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=m_intent_out) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_intent_out\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine interpolation\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_intent_out\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine interpolation call_name interpolation mod_name 'm_intent_out'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_intent_out.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ".\n----------------------------------------------------------------------\nRan 1 test in 0.009s\n\nOK\n"
    },
    {
      "name": "interface",
      "path": "/home/ert/code/f90wrap/examples/interface",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['example.fpp']",
        "Generated C: ['_class_example.c']",
        "Wrapper sources: ['f90wrap_example.f90']",
        "Compilation order: ['example_pp.f90', 'f90wrap_example.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _class_example.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['example.fpp'] ...\nINFO:f90wrap.parser:marking module class_example as default private\nINFO:f90wrap.parser:parser reading type Example\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(example)': Type(name=example),\n 'example': Type(name=example),\n 'type(example)': Type(name=example)}\n\nClass name mapping:\n{'class(example)': 'Example', 'example': 'Example', 'type(example)': 'Example'}\nModules for each type:\n{'class_example': 'class_example'}\nINFO:f90wrap.transform:setting call_name of return_example_first to return_example\nINFO:f90wrap.transform:setting call_name of return_example_second to return_example\nINFO:f90wrap.transform:setting call_name of return_example_third to return_example\nINFO:f90wrap.transform:adding missing constructor for example\nINFO:f90wrap.transform:adding missing destructor for example\nINFO:f90wrap.transform:visiting Module(name=class_example) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=example) found 1 constructors with names: ['example_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module class_example\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type example\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine example_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine example_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting interface return_example\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_example_first\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_example_second\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_example_third\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module class_example\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type example\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine example_initialise call_name example_initialise mod_name 'class_example'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine example_finalise call_name example_finalise mod_name 'class_example'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_example_first call_name return_example mod_name 'class_example'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_example_second call_name return_example mod_name 'class_example'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_example_third call_name return_example mod_name 'class_example'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _class_example.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue105_function_definition_with_empty_lines",
      "path": "/home/ert/code/f90wrap/examples/issue105_function_definition_with_empty_lines",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_itestit.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _itestit.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module itestit as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=itestit) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module itestit\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine testit2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine testit1\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module itestit\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine testit2 call_name testit2 mod_name 'itestit'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine testit1 call_name testit1 mod_name 'itestit'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _itestit.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue206_subroutine_oldstyle",
      "path": "/home/ert/code/f90wrap/examples/issue206_subroutine_oldstyle",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['subroutine_oldstyle.f']",
        "Generated C: ['_issue206_subroutine_oldstyle_direct.c']",
        "Wrapper sources: ['f90wrap_issue206_subroutine_oldstyle_direct.f90']",
        "Compilation order: ['f90wrap_issue206_subroutine_oldstyle_direct.f90', 'subroutine_oldstyle.f']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _issue206_subroutine_oldstyle_direct.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['subroutine_oldstyle.f'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_with_oldstyle_asterisk\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_with_oldstyle_asterisk call_name routine_with_oldstyle_asterisk mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _issue206_subroutine_oldstyle_direct.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue227_allocatable",
      "path": "/home/ert/code/f90wrap/examples/issue227_allocatable",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['alloc_output.fpp']",
        "Generated C: ['_alloc_output.c']",
        "Wrapper sources: ['f90wrap_alloc_output.f90']",
        "Compilation order: ['alloc_output_pp.f90', 'f90wrap_alloc_output.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _alloc_output.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['alloc_output.fpp'] ...\nINFO:f90wrap.parser:parser reading type alloc_output_type\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'alloc_output_type': Type(name=alloc_output_type),\n 'class(alloc_output_type)': Type(name=alloc_output_type),\n 'type(alloc_output_type)': Type(name=alloc_output_type)}\n\nClass name mapping:\n{'alloc_output_type': 'alloc_output_type',\n 'class(alloc_output_type)': 'alloc_output_type',\n 'type(alloc_output_type)': 'alloc_output_type'}\nModules for each type:\n{'alloc_output': 'alloc_output'}\nWARNING:f90wrap.transform:removing routine alloc_output_intrinsic_func due to allocatable intrinsic type arguments\nWARNING:f90wrap.transform:removing routine alloc_output_array_func due to allocatable intrinsic type arguments\nINFO:f90wrap.transform:adding missing constructor for alloc_output_type\nINFO:f90wrap.transform:adding missing destructor for alloc_output_type\nINFO:f90wrap.transform:visiting Module(name=alloc_output) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=alloc_output_type) found 1 constructors with names: ['alloc_output_type_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module alloc_output\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type alloc_output_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_output_type_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_output_type_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine noalloc_output_subroutine\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine alloc_output_type_func\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module alloc_output\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type alloc_output_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_output_type_initialise call_name alloc_output_type_initialise mod_name 'alloc_output'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_output_type_finalise call_name alloc_output_type_finalise mod_name 'alloc_output'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine noalloc_output_subroutine call_name noalloc_output_subroutine mod_name 'alloc_output'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine alloc_output_type_func call_name alloc_output_type_func mod_name 'alloc_output'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _alloc_output.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue235_allocatable_classes",
      "path": "/home/ert/code/f90wrap/examples/issue235_allocatable_classes",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['myclass_factory.fpp', 'mytype.fpp', 'myclass.fpp']",
        "Generated C: ['_myclass_factory.c']",
        "Wrapper sources: ['f90wrap_myclass.f90', 'f90wrap_myclass_factory.f90', 'f90wrap_mytype.f90']",
        "Compilation order: ['myclass_pp.f90', 'f90wrap_myclass.f90', 'myclass_factory_pp.f90', 'f90wrap_myclass_factory.f90', 'mytype_pp.f90', 'f90wrap_mytype.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _myclass_factory.c: _myclass_factory.c: In function \u2018wrap__myclass_factory_mytype_mytype_destroy\u2019:\n_myclass_factory.c:113:10: error: \u2018self\u2019 redeclared as different kind of symbol\n  113 |     int* self = (int*)malloc(sizeof(int) * self_handle_len);\n      |          ^~~~\n_myclass_factory.c:75:72: note: previous definition of \u2018self\u2019 with type \u2018PyObject *\u2019 {aka \u2018struct _object *\u2019}\n   75 | static PyObject* wrap__myclass_factory_mytype_mytype_destroy(PyObject* self, PyObject* args, PyObject* kwargs)\n      |              "
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['myclass_factory.fpp', 'mytype.fpp', 'myclass.fpp'] ...\nINFO:f90wrap.parser:parser reading type mytype_t\nINFO:f90wrap.parser:parser reading type myclass_t\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(myclass_t)': Type(name=myclass_t),\n 'class(mytype_t)': Type(name=mytype_t),\n 'myclass_t': Type(name=myclass_t),\n 'mytype_t': Type(name=mytype_t),\n 'type(myclass_t)': Type(name=myclass_t),\n 'type(mytype_t)': Type(name=mytype_t)}\n\nClass name mapping:\n{'class(myclass_t)': 'myclass_t',\n 'class(mytype_t)': 'mytype_t',\n 'myclass_t': 'myclass_t',\n 'mytype_t': 'mytype_t',\n 'type(myclass_t)': 'myclass_t',\n 'type(mytype_t)': 'mytype_t'}\nModules for each type:\n{'myclass': 'myclass', 'mytype': 'mytype'}\nINFO:f90wrap.transform:adding missing constructor for mytype_t\nINFO:f90wrap.transform:adding missing constructor for myclass_t\nINFO:f90wrap.transform:found destructor mytype_destroy\nINFO:f90wrap.transform:found destructor myclass_destroy\nINFO:f90wrap.transform:visiting Module(name=myclass_factory) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Module(name=mytype) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=mytype_t) found 1 constructors with names: ['mytype_t_initialise']\nINFO:f90wrap.transform:visiting Module(name=myclass) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=myclass_t) found 1 constructors with names: ['myclass_t_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module myclass_factory\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_create\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module mytype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type mytype_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_t_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_destroy__binding__mytype_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_destroy\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_create\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module myclass\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type myclass_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_t_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_val__binding__myclass_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine set_val__binding__myclass_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_destroy__binding__myclass_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_get_val\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_destroy\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_set_val\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module myclass_factory\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_create call_name myclass_create mod_name 'myclass_factory'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module mytype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type mytype_t\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_t_initialise call_name mytype_t_initialise mod_name 'mytype'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_destroy__binding__mytype_t call_name mytype_destroy mod_name 'mytype'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_destroy call_name mytype_destroy mod_name 'mytype'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_create call_name mytype_create mod_name 'mytype'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module myclass\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type myclass_t\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_t_initialise call_name myclass_t_initialise mod_name 'myclass'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_val__binding__myclass_t call_name get_val mod_name 'myclass'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine set_val__binding__myclass_t call_name set_val mod_name 'myclass'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_destroy__binding__myclass_t call_name myclass_destroy mod_name 'myclass'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_get_val call_name myclass_get_val mod_name 'myclass'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_destroy call_name myclass_destroy mod_name 'myclass'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_set_val call_name myclass_set_val mod_name 'myclass'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _myclass_factory.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue254_getter",
      "path": "/home/ert/code/f90wrap/examples/issue254_getter",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['KIMDispersion_Horton.fpp', 'KIMDispersionEquation.fpp']",
        "Generated C: ['_kimdispersionequation_module.c']",
        "Wrapper sources: ['f90wrap_KIMDispersionEquation.f90', 'f90wrap_KIMDispersion_Horton.f90']",
        "Compilation order: ['KIMDispersionEquation_pp.f90', 'KIMDispersion_Horton_pp.f90', 'f90wrap_KIMDispersionEquation.f90', 'f90wrap_KIMDispersion_Horton.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _kimdispersionequation_module.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['KIMDispersion_Horton.fpp', 'KIMDispersionEquation.fpp'] ...\nINFO:f90wrap.parser:parser reading type KIMDispersion_Horton\nINFO:f90wrap.parser:parser reading type OptionsType\nINFO:f90wrap.parser:parser reading type KIMDispersionEquation\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(kimdispersion_horton)': Type(name=kimdispersion_horton),\n 'class(kimdispersionequation)': Type(name=kimdispersionequation),\n 'class(optionstype)': Type(name=optionstype),\n 'kimdispersion_horton': Type(name=kimdispersion_horton),\n 'kimdispersionequation': Type(name=kimdispersionequation),\n 'optionstype': Type(name=optionstype),\n 'type(kimdispersion_horton)': Type(name=kimdispersion_horton),\n 'type(kimdispersionequation)': Type(name=kimdispersionequation),\n 'type(optionstype)': Type(name=optionstype)}\n\nClass name mapping:\n{'class(kimdispersion_horton)': 'KIMDispersion_Horton',\n 'class(kimdispersionequation)': 'KIMDispersionEquation',\n 'class(optionstype)': 'OptionsType',\n 'kimdispersion_horton': 'KIMDispersion_Horton',\n 'kimdispersionequation': 'KIMDispersionEquation',\n 'optionstype': 'OptionsType',\n 'type(kimdispersion_horton)': 'KIMDispersion_Horton',\n 'type(kimdispersionequation)': 'KIMDispersionEquation',\n 'type(optionstype)': 'OptionsType'}\nModules for each type:\n{'kimdispersion_horton_module': 'kimdispersion_horton_module',\n 'kimdispersionequation_module': 'kimdispersionequation_module'}\nINFO:f90wrap.transform:adding missing constructor for optionstype\nINFO:f90wrap.transform:adding missing constructor for kimdispersionequation\nINFO:f90wrap.transform:adding missing constructor for kimdispersion_horton\nINFO:f90wrap.transform:adding missing destructor for optionstype\nINFO:f90wrap.transform:adding missing destructor for kimdispersionequation\nINFO:f90wrap.transform:adding missing destructor for kimdispersion_horton\nINFO:f90wrap.transform:visiting Module(name=kimdispersionequation_module) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=optionstype) found 1 constructors with names: ['optionstype_initialise']\nINFO:f90wrap.transform:visiting Type(name=kimdispersionequation) found 1 constructors with names: ['kimdispersionequation_initialise']\nINFO:f90wrap.transform:visiting Module(name=kimdispersion_horton_module) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=kimdispersion_horton) found 1 constructors with names: ['kimdispersion_horton_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module kimdispersionequation_module\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type optionstype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine optionstype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine optionstype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type kimdispersionequation\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine kimdispersionequation_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine kimdispersionequation_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine initialize__binding__kimdispersionequation\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__initialize__binding__kimdispersionequation\" to \"f90wrap_kimdispersionequation_module__initialize__binding__5dd3\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module kimdispersion_horton_module\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type kimdispersion_horton\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine kimdispersion_horton_initialise\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_initialise\" to \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_ib155\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine kimdispersion_horton_finalise\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_finalise\" to \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_fa9f5\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine initialize__binding__kimdispersion_horton\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize__binding__kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize__binding__k2119\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine initialize_kimdispersion_horton\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize_kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize_kimdispersifc68\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module kimdispersionequation_module\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type optionstype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine optionstype_initialise call_name optionstype_initialise mod_name 'kimdispersionequation_module'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine optionstype_finalise call_name optionstype_finalise mod_name 'kimdispersionequation_module'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type kimdispersionequation\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine initialize__binding__kimdispersionequation call_name initialize mod_name 'kimdispersionequation_module'\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__initialize__binding__kimdispersionequation\" to \"f90wrap_kimdispersionequation_module__initialize__binding__5dd3\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module kimdispersion_horton_module\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type kimdispersion_horton\nWARNING:f90wrap.f90wrapgen:oh no\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine kimdispersion_horton_initialise call_name kimdispersion_horton_initialise mod_name 'kimdispersion_horton_module'\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_initialise\" to \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_ib155\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine kimdispersion_horton_finalise call_name kimdispersion_horton_finalise mod_name 'kimdispersion_horton_module'\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_finalise\" to \"f90wrap_kimdispersion_horton_module__kimdispersion_horton_fa9f5\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine initialize__binding__kimdispersion_horton call_name initialize mod_name 'kimdispersion_horton_module'\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize__binding__kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize__binding__k2119\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine initialize_kimdispersion_horton call_name initialize_KIMDispersion_Horton mod_name 'kimdispersion_horton_module'\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize_kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize_kimdispersifc68\" to comply with Fortran 2003\nINFO:root:Generating Direct-C extension modules...\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize_kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize_kimdispersifc68\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__kimdispersionequation_initialise\" to \"f90wrap_kimdispersionequation_module__kimdispersionequation9266\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__kimdispersionequation_finalise\" to \"f90wrap_kimdispersionequation_module__kimdispersionequationc882\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize_kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize_kimdispersifc68\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__kimdispersionequation_initialise\" to \"f90wrap_kimdispersionequation_module__kimdispersionequation9266\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__kimdispersionequation_finalise\" to \"f90wrap_kimdispersionequation_module__kimdispersionequationc882\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersion_horton_module__initialize_kimdispersion_horton\" to \"f90wrap_kimdispersion_horton_module__initialize_kimdispersifc68\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__kimdispersionequation_initialise\" to \"f90wrap_kimdispersionequation_module__kimdispersionequation9266\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_kimdispersionequation_module__kimdispersionequation_finalise\" to \"f90wrap_kimdispersionequation_module__kimdispersionequationc882\" to comply with Fortran 2003\nINFO:root:Generated _kimdispersionequation_module.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue258_derived_type_attributes",
      "path": "/home/ert/code/f90wrap/examples/issue258_derived_type_attributes",
      "status": "FAIL",
      "error_category": "fortran_compilation_failed",
      "notes": [
        "f90wrap inputs: ['dta_ct.fpp', 'dta_cc.fpp', 'dta_tt.fpp', 'dta_tc.fpp']",
        "Generated C: ['_dta_ct.c']",
        "Wrapper sources: ['f90wrap_dta_cc.f90', 'f90wrap_dta_ct.f90', 'f90wrap_dta_tc.f90', 'f90wrap_dta_tt.f90']",
        "Compilation order: ['dta_cc_pp.f90', 'dta_ct_pp.f90', 'dta_tc_pp.f90', 'dta_tt_pp.f90', 'f90wrap_dta_cc.f90', 'f90wrap_dta_ct.f90', 'f90wrap_dta_tc.f90', 'f90wrap_dta_tt.f90']",
        "Fortran compilation failed: f90wrap_dta_cc.f90:152:45:\n\n  152 |     call t_inner_print(inner=inner_ptr%p%obj)\n      |                                             1\nError: Type mismatch in argument \u2018inner\u2019 at (1); passed CLASS(t_inner) to CLASS(t_inner)\nf90wrap_dta_ct.f90:43:23:\n\n   43 |         class(t_inner), allocatable :: obj\n      |                       1\nError: Type name \u2018t_inner\u2019 at (1) is ambiguous\nf90wrap_dta_ct.f90:52:24:\n\n   52 |     ret_inner_ptr%p%obj = t_inner(value=value)\n      |                        1\nErr",
        "Module dependency hints: dta_ct_pp.f90: defines dta_ct; dta_cc_pp.f90: defines dta_cc; dta_tt_pp.f90: defines dta_tt; dta_tc_pp.f90: defines dta_tc; f90wrap_dta_cc.f90: uses ['dta_tc', 'dta_cc']; f90wrap_dta_ct.f90: uses ['dta_tc', 'dta_ct']; f90wrap_dta_tc.f90: uses ['dta_tc']; f90wrap_dta_tt.f90: uses ['dta_tc']"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['dta_ct.fpp', 'dta_cc.fpp', 'dta_tt.fpp', 'dta_tc.fpp'] ...\nINFO:f90wrap.parser:parser reading type t_inner\nINFO:f90wrap.parser:parser reading type t_outer\nINFO:f90wrap.parser:parser reading type t_inner\nINFO:f90wrap.parser:parser reading type t_outer\nINFO:f90wrap.parser:parser reading type t_inner\nINFO:f90wrap.parser:parser reading type t_outer\nINFO:f90wrap.parser:parser reading type t_inner\nINFO:f90wrap.parser:parser reading type t_outer\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(t_inner)': Type(name=t_inner),\n 'class(t_outer)': Type(name=t_outer),\n 't_inner': Type(name=t_inner),\n 't_outer': Type(name=t_outer),\n 'type(t_inner)': Type(name=t_inner),\n 'type(t_outer)': Type(name=t_outer)}\n\nClass name mapping:\n{'class(t_inner)': 't_inner',\n 'class(t_outer)': 't_outer',\n 't_inner': 't_inner',\n 't_outer': 't_outer',\n 'type(t_inner)': 't_inner',\n 'type(t_outer)': 't_outer'}\nModules for each type:\n{'dta_tc': 'dta_tc'}\nINFO:f90wrap.transform:setting call_name of new_inner to t_inner\nINFO:f90wrap.transform:setting call_name of new_outer to t_outer\nINFO:f90wrap.transform:setting call_name of new_inner to t_inner\nINFO:f90wrap.transform:setting call_name of new_outer to t_outer\nINFO:f90wrap.transform:setting call_name of new_inner to t_inner\nINFO:f90wrap.transform:setting call_name of new_outer to t_outer\nINFO:f90wrap.transform:setting call_name of new_inner to t_inner\nINFO:f90wrap.transform:setting call_name of new_outer to t_outer\nINFO:f90wrap.transform:found constructor new_inner\nINFO:f90wrap.transform:found constructor new_outer\nINFO:f90wrap.transform:found constructor new_inner\nINFO:f90wrap.transform:found constructor new_outer\nINFO:f90wrap.transform:found constructor new_inner\nINFO:f90wrap.transform:found constructor new_outer\nINFO:f90wrap.transform:found constructor new_inner\nINFO:f90wrap.transform:found constructor new_outer\nINFO:f90wrap.transform:adding missing destructor for t_inner\nINFO:f90wrap.transform:adding missing destructor for t_outer\nINFO:f90wrap.transform:adding missing destructor for t_inner\nINFO:f90wrap.transform:adding missing destructor for t_outer\nINFO:f90wrap.transform:adding missing destructor for t_inner\nINFO:f90wrap.transform:adding missing destructor for t_outer\nINFO:f90wrap.transform:adding missing destructor for t_inner\nINFO:f90wrap.transform:adding missing destructor for t_outer\nINFO:f90wrap.transform:visiting Module(name=dta_ct) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_inner) found 1 constructors with names: ['new_inner']\nINFO:f90wrap.transform:visiting Type(name=t_outer) found 1 constructors with names: ['new_outer']\nINFO:f90wrap.transform:visiting Module(name=dta_cc) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_inner) found 1 constructors with names: ['new_inner']\nINFO:f90wrap.transform:visiting Type(name=t_outer) found 1 constructors with names: ['new_outer']\nINFO:f90wrap.transform:visiting Module(name=dta_tt) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_inner) found 1 constructors with names: ['new_inner']\nINFO:f90wrap.transform:visiting Type(name=t_outer) found 1 constructors with names: ['new_outer']\nINFO:f90wrap.transform:visiting Module(name=dta_tc) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_inner) found 1 constructors with names: ['new_inner']\nINFO:f90wrap.transform:visiting Type(name=t_outer) found 1 constructors with names: ['new_outer']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module dta_ct\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_inner_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_outer_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine print__binding__t_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_outer_print\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_outer_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module dta_cc\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_inner_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine print__binding__t_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_outer_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine print__binding__t_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_outer_print\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_inner_print\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_outer_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module dta_tt\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_inner_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_outer_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_outer_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module dta_tc\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_inner_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine print__binding__t_inner\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine new_outer\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_outer_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_inner_print\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_outer_inner\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module dta_ct\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_inner\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine new_inner call_name t_inner mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_inner_finalise call_name t_inner_finalise mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_outer\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine new_outer call_name t_outer mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_outer_finalise call_name t_outer_finalise mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine print__binding__t_outer call_name print mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_outer_print call_name t_outer_print mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_outer_inner call_name get_outer_inner mod_name 'dta_ct'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module dta_cc\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_inner\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine print__binding__t_inner call_name print mod_name 'dta_cc'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_outer\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_inner_print call_name t_inner_print mod_name 'dta_cc'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module dta_tt\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_inner\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_outer\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module dta_tc\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_inner\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_outer\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _dta_ct.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue261_array_shapes",
      "path": "/home/ert/code/f90wrap/examples/issue261_array_shapes",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['array_shapes.fpp']",
        "Generated C: ['_array_shapes.c']",
        "Wrapper sources: ['f90wrap_array_shapes.f90']",
        "Compilation order: ['array_shapes_pp.f90', 'f90wrap_array_shapes.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _array_shapes.c: _array_shapes.c: In function \u2018wrap__array_shapes_array_shapes_one_array_fixed_range\u2019:\n_array_shapes.c:787:42: error: expected \u2018)\u2019 before \u2018:\u2019 token\n  787 |     npy_intp ret_res_dim_0 = (npy_intp)(1:3);\n      |                                        ~ ^\n      |                                          )\n"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['array_shapes.fpp'] ...\nINFO:f90wrap.parser:parser reading type container\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(container)': Type(name=container),\n 'container': Type(name=container),\n 'type(container)': Type(name=container)}\n\nClass name mapping:\n{'class(container)': 'container',\n 'container': 'container',\n 'type(container)': 'container'}\nModules for each type:\n{'array_shapes': 'array_shapes'}\nINFO:f90wrap.transform:adding missing constructor for container\nINFO:f90wrap.transform:adding missing destructor for container\nINFO:f90wrap.transform:visiting Module(name=array_shapes) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=container) found 1 constructors with names: ['container_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module array_shapes\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type container\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine container_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine container_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_2d_fixed\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_fixed\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_mixed\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'two_arrays_mixed' ('size_bn(x)' -> 'x.shape[0]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_2d_mixed\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'two_arrays_2d_mixed' ('size_bn(x)' -> 'x.shape[0]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine one_array_explicit\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'one_array_explicit' ('n' -> 'n')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_2d_dynamic\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'two_arrays_2d_dynamic' ('size_bn(x)' -> 'x.shape[0]')\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'two_arrays_2d_dynamic' ('size_bn(y)' -> 'y.shape[0]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_container_dynamic\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'array_container_dynamic' ('c%n_data' -> 'self.n_data')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_2d_fixed_whitespace\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine one_array_explicit_range\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'one_array_explicit_range' ('n' -> 'n')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_container\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine one_array_fixed_range\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine two_arrays_dynamic\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'two_arrays_dynamic' ('size_bn(x)' -> 'x.shape[0]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine one_array_dynamic\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'one_array_dynamic' ('size_bn(x)' -> 'x.shape[0]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_container_fixed\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'array_container_fixed' ('c%n_data' -> 'self.n_data')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_container_dynamic_2d\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'array_container_dynamic_2d' ('c%n_data' -> 'c.n_data')\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'array_container_dynamic_2d' ('n' -> 'n')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine one_array_fixed\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module array_shapes\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type container\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine container_initialise call_name container_initialise mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine container_finalise call_name container_finalise mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_2d_fixed call_name two_arrays_2d_fixed mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_fixed call_name two_arrays_fixed mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_mixed call_name two_arrays_mixed mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_2d_mixed call_name two_arrays_2d_mixed mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine one_array_explicit call_name one_array_explicit mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_2d_dynamic call_name two_arrays_2d_dynamic mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_container_dynamic call_name array_container_dynamic mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_2d_fixed_whitespace call_name two_arrays_2d_fixed_whitespace mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine one_array_explicit_range call_name one_array_explicit_range mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_container call_name get_container mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine one_array_fixed_range call_name one_array_fixed_range mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine two_arrays_dynamic call_name two_arrays_dynamic mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine one_array_dynamic call_name one_array_dynamic mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_container_fixed call_name array_container_fixed mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_container_dynamic_2d call_name array_container_dynamic_2d mod_name 'array_shapes'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine one_array_fixed call_name one_array_fixed mod_name 'array_shapes'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _array_shapes.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue32",
      "path": "/home/ert/code/f90wrap/examples/issue32",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_issue32_direct.c']",
        "Wrapper sources: ['f90wrap_issue32_direct.f90']",
        "Compilation order: ['f90wrap_issue32_direct.f90', 'test_pp.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _issue32_direct.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'real': {'': 'float', '8': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine foo\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine foo call_name foo mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _issue32_direct.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "issue41_abstract_classes",
      "path": "/home/ert/code/f90wrap/examples/issue41_abstract_classes",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['myclass_factory.fpp', 'main.fpp', 'myclass_impl.fpp', 'myclass_base.fpp', 'myclass_impl2.fpp']",
        "Generated C: ['_myclass_factory.c']",
        "Wrapper sources: ['f90wrap_myclass_base.f90', 'f90wrap_myclass_factory.f90', 'f90wrap_myclass_impl.f90', 'f90wrap_myclass_impl2.f90']",
        "Compilation order: ['myclass_base_pp.f90', 'f90wrap_myclass_base.f90', 'myclass_impl2_pp.f90', 'f90wrap_myclass_impl2.f90', 'myclass_impl_pp.f90', 'f90wrap_myclass_impl.f90', 'myclass_factory_pp.f90', 'f90wrap_myclass_factory.f90', 'main_pp.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _myclass_factory.c: _myclass_factory.c: In function \u2018wrap__myclass_factory_myclass_impl_get_value_impl\u2019:\n_myclass_factory.c:122:10: error: \u2018self\u2019 redeclared as different kind of symbol\n  122 |     int* self = (int*)malloc(sizeof(int) * self_handle_len);\n      |          ^~~~\n_myclass_factory.c:83:78: note: previous definition of \u2018self\u2019 with type \u2018PyObject *\u2019 {aka \u2018struct _object *\u2019}\n   83 | static PyObject* wrap__myclass_factory_myclass_impl_get_value_impl(PyObject* self, PyObject* args, PyObject* kwargs)\n      |  "
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['myclass_factory.fpp', 'main.fpp', 'myclass_impl.fpp', 'myclass_base.fpp', 'myclass_impl2.fpp'] ...\nINFO:f90wrap.parser:parser reading type myclass_impl_t\nINFO:f90wrap.parser:parser reading type myclass_t\nINFO:f90wrap.parser:parser reading type myclass_impl2_t\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(myclass_impl2_t)': Type(name=myclass_impl2_t),\n 'class(myclass_impl_t)': Type(name=myclass_impl_t),\n 'class(myclass_t)': Type(name=myclass_t),\n 'myclass_impl2_t': Type(name=myclass_impl2_t),\n 'myclass_impl_t': Type(name=myclass_impl_t),\n 'myclass_t': Type(name=myclass_t),\n 'type(myclass_impl2_t)': Type(name=myclass_impl2_t),\n 'type(myclass_impl_t)': Type(name=myclass_impl_t),\n 'type(myclass_t)': Type(name=myclass_t)}\n\nClass name mapping:\n{'class(myclass_impl2_t)': 'myclass_impl2_t',\n 'class(myclass_impl_t)': 'myclass_impl_t',\n 'class(myclass_t)': 'myclass_t',\n 'myclass_impl2_t': 'myclass_impl2_t',\n 'myclass_impl_t': 'myclass_impl_t',\n 'myclass_t': 'myclass_t',\n 'type(myclass_impl2_t)': 'myclass_impl2_t',\n 'type(myclass_impl_t)': 'myclass_impl_t',\n 'type(myclass_t)': 'myclass_t'}\nModules for each type:\n{'myclass_base': 'myclass_base',\n 'myclass_impl': 'myclass_impl',\n 'myclass_impl2': 'myclass_impl2'}\nINFO:f90wrap.transform:adding missing constructor for myclass_t\nINFO:f90wrap.transform:adding missing constructor for myclass_impl_t\nINFO:f90wrap.transform:adding missing constructor for myclass_impl2_t\nINFO:f90wrap.transform:adding missing destructor for myclass_t\nINFO:f90wrap.transform:found destructor myclass_impl_destroy\nINFO:f90wrap.transform:found destructor myclass_impl2_destroy\nINFO:f90wrap.transform:visiting Module(name=myclass_factory) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Module(name=myclass_base) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=myclass_t) found 1 constructors with names: ['myclass_t_initialise']\nINFO:f90wrap.transform:visiting Module(name=myclass_impl) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=myclass_impl_t) found 1 constructors with names: ['myclass_impl_t_initialise']\nINFO:f90wrap.transform:visiting Module(name=myclass_impl2) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=myclass_impl2_t) found 1 constructors with names: ['myclass_impl2_t_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module myclass_factory\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine create_myclass\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module myclass_base\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type myclass_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_t_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_t_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_value__binding__myclass_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module myclass_impl\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type myclass_impl_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_impl_t_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_value__binding__myclass_impl_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_impl_destroy__binding__myclass_impl_t\nINFO:f90wrap.transform:Renaming \"f90wrap_myclass_impl__myclass_impl_destroy__binding__myclass_impl_t\" to \"f90wrap_myclass_impl__myclass_impl_destroy__binding__myclas021a\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_value_impl\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_impl_destroy\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module myclass_impl2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type myclass_impl2_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_impl2_t_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_value__binding__myclass_impl2_t\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_impl2_destroy__binding__myclass_impl2_t\nINFO:f90wrap.transform:Renaming \"f90wrap_myclass_impl2__myclass_impl2_destroy__binding__myclass_impl2_t\" to \"f90wrap_myclass_impl2__myclass_impl2_destroy__binding__mycla358\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine myclass_impl2_destroy\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine get_value_impl2\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine test call_name test mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module myclass_factory\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine create_myclass call_name create_myclass mod_name 'myclass_factory'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module myclass_base\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type myclass_t\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_value__binding__myclass_t call_name get_value mod_name 'myclass_base'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module myclass_impl\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type myclass_impl_t\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_impl_t_initialise call_name myclass_impl_t_initialise mod_name 'myclass_impl'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_value__binding__myclass_impl_t call_name get_value mod_name 'myclass_impl'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_impl_destroy__binding__myclass_impl_t call_name myclass_impl_destroy mod_name 'myclass_impl'\nINFO:f90wrap.transform:Renaming \"f90wrap_myclass_impl__myclass_impl_destroy__binding__myclass_impl_t\" to \"f90wrap_myclass_impl__myclass_impl_destroy__binding__myclas021a\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_value_impl call_name get_value_impl mod_name 'myclass_impl'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_impl_destroy call_name myclass_impl_destroy mod_name 'myclass_impl'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module myclass_impl2\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type myclass_impl2_t\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_impl2_t_initialise call_name myclass_impl2_t_initialise mod_name 'myclass_impl2'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_value__binding__myclass_impl2_t call_name get_value mod_name 'myclass_impl2'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_impl2_destroy__binding__myclass_impl2_t call_name myclass_impl2_destroy mod_name 'myclass_impl2'\nINFO:f90wrap.transform:Renaming \"f90wrap_myclass_impl2__myclass_impl2_destroy__binding__myclass_impl2_t\" to \"f90wrap_myclass_impl2__myclass_impl2_destroy__binding__mycla358\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine myclass_impl2_destroy call_name myclass_impl2_destroy mod_name 'myclass_impl2'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine get_value_impl2 call_name get_value_impl2 mod_name 'myclass_impl2'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _myclass_factory.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "keyword_renaming_issue160",
      "path": "/home/ert/code/f90wrap/examples/keyword_renaming_issue160",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['rename.fpp']",
        "Generated C: ['_global_.c']",
        "Wrapper sources: ['f90wrap_keyword_renaming_issue160_direct.f90', 'f90wrap_rename.f90']",
        "Compilation order: ['f90wrap_keyword_renaming_issue160_direct.f90', 'rename_pp.f90', 'f90wrap_rename.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _global_.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'integer': {'': 'long_long', '4': 'int', '8': 'long_long', 'dp': 'long_long'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['rename.fpp'] ...\nINFO:f90wrap.parser:parser reading type class2\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(class2)': Type(name=class2),\n 'class2': Type(name=class2),\n 'type(class2)': Type(name=class2)}\n\nClass name mapping:\n{'class(class2)': 'class2', 'class2': 'class2', 'type(class2)': 'class2'}\nModules for each type:\n{'global': 'global'}\nINFO:f90wrap.transform:adding missing constructor for class2\nINFO:f90wrap.transform:adding missing destructor for class2\nINFO:f90wrap.transform:visiting Module(name=global) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=class2) found 1 constructors with names: ['class2_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module global_\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type class2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine class2_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine class2_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module global_\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type class2\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine class2_initialise call_name class2_initialise mod_name 'global'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine class2_finalise call_name class2_finalise mod_name 'global'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_ call_name is mod_name 'global'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_ call_name in mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _global_.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "kind_map_default",
      "path": "/home/ert/code/f90wrap/examples/kind_map_default",
      "status": "FAIL",
      "error_category": "fortran_compilation_failed",
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_test.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation failed: f90wrap_main.f90:9:18:\n\n    9 |     ret_out_int = test_real8(in_real=in_real)\n      |                  1\nError: Type mismatch in argument \u2018in_real\u2019 at (1); passed REAL(4) to REAL(8)\n",
        "Module dependency hints: main_pp.f90: defines m_test; f90wrap_main.f90: uses ['m_test']"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_test as default public\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=m_test) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine test_real8\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine test_real4\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine test_real\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine test_real8 call_name test_real8 mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine test_real4 call_name test_real4 mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine test_real call_name test_real mod_name 'm_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "long_subroutine_name",
      "path": "/home/ert/code/f90wrap/examples/long_subroutine_name",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_long_subroutine_name.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_long_subroutine_name.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:parser reading type m_long_subroutine_name_type\nINFO:f90wrap.parser:parser reading type m_long_subroutine_name_type_2\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(m_long_subroutine_name_type)': Type(name=m_long_subroutine_name_type),\n 'class(m_long_subroutine_name_type_2)': Type(name=m_long_subroutine_name_type_2),\n 'm_long_subroutine_name_type': Type(name=m_long_subroutine_name_type),\n 'm_long_subroutine_name_type_2': Type(name=m_long_subroutine_name_type_2),\n 'type(m_long_subroutine_name_type)': Type(name=m_long_subroutine_name_type),\n 'type(m_long_subroutine_name_type_2)': Type(name=m_long_subroutine_name_type_2)}\n\nClass name mapping:\n{'class(m_long_subroutine_name_type)': 'm_long_subroutine_name_type',\n 'class(m_long_subroutine_name_type_2)': 'm_long_subroutine_name_type_2',\n 'm_long_subroutine_name_type': 'm_long_subroutine_name_type',\n 'm_long_subroutine_name_type_2': 'm_long_subroutine_name_type_2',\n 'type(m_long_subroutine_name_type)': 'm_long_subroutine_name_type',\n 'type(m_long_subroutine_name_type_2)': 'm_long_subroutine_name_type_2'}\nModules for each type:\n{'m_long_subroutine_name': 'm_long_subroutine_name'}\nINFO:f90wrap.transform:adding missing constructor for m_long_subroutine_name_type\nINFO:f90wrap.transform:adding missing constructor for m_long_subroutine_name_type_2\nINFO:f90wrap.transform:adding missing destructor for m_long_subroutine_name_type\nINFO:f90wrap.transform:adding missing destructor for m_long_subroutine_name_type_2\nINFO:f90wrap.transform:visiting Module(name=m_long_subroutine_name) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=m_long_subroutine_name_type) found 1 constructors with names: ['m_long_subroutine_name_type_initialise']\nINFO:f90wrap.transform:visiting Type(name=m_long_subroutine_name_type_2) found 1 constructors with names: ['m_long_subroutine_name_type_2_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_long_subroutine_name\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type m_long_subroutine_name_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine m_long_subroutine_name_type_initialise\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typefcc3\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine m_long_subroutine_name_type_finalise\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type6ffd\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine0485\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine7044\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__array__m_long_subroutine_name_type_integer_array\" to \"f90wrap_m_long_subroutine_name_type__array__m_long_subrouti6cde\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type m_long_subroutine_name_type_2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine m_long_subroutine_name_type_2_initialise\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typebe6a\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine m_long_subroutine_name_type_2_finalise\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type1fc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_lonf40c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_lonc291\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_su541d\" to comply with Fortran 2003\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine m_long_subroutine_name_subroutine\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subroutine\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subra0ea\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_namebc01\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name860c\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_long_subroutine_name\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type m_long_subroutine_name_type\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine0485\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine7044\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__array__m_long_subroutine_name_type_integer_array\" to \"f90wrap_m_long_subroutine_name_type__array__m_long_subrouti6cde\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine m_long_subroutine_name_type_initialise call_name m_long_subroutine_name_type_initialise mod_name 'm_long_subroutine_name'\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typefcc3\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine m_long_subroutine_name_type_finalise call_name m_long_subroutine_name_type_finalise mod_name 'm_long_subroutine_name'\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type6ffd\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type m_long_subroutine_name_type_2\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_lonf40c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_lonc291\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_su541d\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine m_long_subroutine_name_type_2_initialise call_name m_long_subroutine_name_type_2_initialise mod_name 'm_long_subroutine_name'\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typebe6a\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine m_long_subroutine_name_type_2_finalise call_name m_long_subroutine_name_type_2_finalise mod_name 'm_long_subroutine_name'\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type1fc3\" to comply with Fortran 2003\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine m_long_subroutine_name_subroutine call_name m_long_subroutine_name_subroutine mod_name 'm_long_subroutine_name'\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subroutine\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subra0ea\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_namebc01\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name860c\" to comply with Fortran 2003\nINFO:root:Generating Direct-C extension modules...\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subroutine\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subra0ea\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typefcc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type6ffd\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typebe6a\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type1fc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_namebc01\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name860c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine0485\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine7044\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__array__m_long_subroutine_name_type_integer_array\" to \"f90wrap_m_long_subroutine_name_type__array__m_long_subrouti6cde\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_lonf40c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_lonc291\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_su541d\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subroutine\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subra0ea\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typefcc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type6ffd\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typebe6a\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type1fc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_namebc01\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name860c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine0485\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine7044\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__array__m_long_subroutine_name_type_integer_array\" to \"f90wrap_m_long_subroutine_name_type__array__m_long_subrouti6cde\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_lonf40c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_lonc291\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_su541d\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subroutine\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_subra0ea\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typefcc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type6ffd\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_initialise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_typebe6a\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type_2_finalise\" to \"f90wrap_m_long_subroutine_name__m_long_subroutine_name_type1fc3\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__get__m_long_subroutine_namebc01\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name_integer\" to \"f90wrap_m_long_subroutine_name__set__m_long_subroutine_name860c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__get__m_long_subroutine0485\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine_name_type_integer\" to \"f90wrap_m_long_subroutine_name_type__set__m_long_subroutine7044\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type__array__m_long_subroutine_name_type_integer_array\" to \"f90wrap_m_long_subroutine_name_type__array__m_long_subrouti6cde\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_getitem__m_lonf40c\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_setitem__m_lonc291\" to comply with Fortran 2003\nINFO:f90wrap.transform:Renaming \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_subroutine_name_type_2_type_array\" to \"f90wrap_m_long_subroutine_name_type_2__array_len__m_long_su541d\" to comply with Fortran 2003\nINFO:root:Generated _m_long_subroutine_name.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "mockderivetype",
      "path": "/home/ert/code/f90wrap/examples/mockderivetype",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['leveltwomod.fpp', 'define.fpp', 'fwrap.fpp']",
        "Generated C: ['_leveltwomod.c']",
        "Wrapper sources: ['f90wrap_define.f90', 'f90wrap_fwrap.f90', 'f90wrap_leveltwomod.f90', 'f90wrap_mockderivetype_direct.f90']",
        "Compilation order: ['f90wrap_mockderivetype_direct.f90', 'leveltwomod_pp.f90', 'define_pp.f90', 'f90wrap_define.f90', 'f90wrap_leveltwomod.f90', 'fwrap_pp.f90', 'f90wrap_fwrap.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _leveltwomod.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'complex': {'': 'complex_float',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['leveltwomod.fpp', 'define.fpp', 'fwrap.fpp'] ...\nINFO:f90wrap.parser:parser reading type leveltwo\nINFO:f90wrap.parser:parser reading type atype\nINFO:f90wrap.parser:parser reading type unused_type\nINFO:f90wrap.parser:parser reading type horrible_type\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'atype': Type(name=atype),\n 'class(atype)': Type(name=atype),\n 'class(horrible_type)': Type(name=horrible_type),\n 'class(leveltwo)': Type(name=leveltwo),\n 'class(unused_type)': Type(name=unused_type),\n 'horrible_type': Type(name=horrible_type),\n 'leveltwo': Type(name=leveltwo),\n 'type(atype)': Type(name=atype),\n 'type(horrible_type)': Type(name=horrible_type),\n 'type(leveltwo)': Type(name=leveltwo),\n 'type(unused_type)': Type(name=unused_type),\n 'unused_type': Type(name=unused_type)}\n\nClass name mapping:\n{'atype': 'atype',\n 'class(atype)': 'atype',\n 'class(horrible_type)': 'horrible_type',\n 'class(leveltwo)': 'leveltwo',\n 'class(unused_type)': 'unused_type',\n 'horrible_type': 'horrible_type',\n 'leveltwo': 'leveltwo',\n 'type(atype)': 'atype',\n 'type(horrible_type)': 'horrible_type',\n 'type(leveltwo)': 'leveltwo',\n 'type(unused_type)': 'unused_type',\n 'unused_type': 'unused_type'}\nModules for each type:\n{'define_a_type': 'define_a_type',\n 'horrible': 'horrible',\n 'leveltwomod': 'leveltwomod'}\nINFO:f90wrap.transform:adding missing constructor for leveltwo\nINFO:f90wrap.transform:adding missing constructor for atype\nINFO:f90wrap.transform:adding missing constructor for unused_type\nINFO:f90wrap.transform:adding missing constructor for horrible_type\nINFO:f90wrap.transform:adding missing destructor for leveltwo\nINFO:f90wrap.transform:adding missing destructor for atype\nINFO:f90wrap.transform:adding missing destructor for unused_type\nINFO:f90wrap.transform:adding missing destructor for horrible_type\nINFO:f90wrap.transform:visiting Module(name=leveltwomod) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=leveltwo) found 1 constructors with names: ['leveltwo_initialise']\nINFO:f90wrap.transform:visiting Module(name=define_a_type) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=atype) found 1 constructors with names: ['atype_initialise']\nINFO:f90wrap.transform:visiting Type(name=unused_type) found 1 constructors with names: ['unused_type_initialise']\nINFO:f90wrap.transform:visiting Module(name=horrible) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=horrible_type) found 1 constructors with names: ['horrible_type_initialise']\nINFO:f90wrap.transform:visiting Module(name=use_a_type) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module leveltwomod\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type leveltwo\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine leveltwo_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine leveltwo_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module define_a_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type atype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine atype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine atype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type unused_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine unused_type_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine unused_type_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_a_type_func\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_a_type_sub\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine use_set_vars\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module horrible\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type horrible_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine horrible_type_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine horrible_type_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module use_a_type\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine do_stuff\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine not_used\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine top_level\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module leveltwomod\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type leveltwo\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine leveltwo_initialise call_name leveltwo_initialise mod_name 'leveltwomod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine leveltwo_finalise call_name leveltwo_finalise mod_name 'leveltwomod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module define_a_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type atype\nWARNING:f90wrap.f90wrapgen:oh no\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine atype_initialise call_name atype_initialise mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine atype_finalise call_name atype_finalise mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type unused_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine unused_type_initialise call_name unused_type_initialise mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine unused_type_finalise call_name unused_type_finalise mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_a_type_func call_name return_a_type_func mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_a_type_sub call_name return_a_type_sub mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine use_set_vars call_name use_set_vars mod_name 'define_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module horrible\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type horrible_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine horrible_type_initialise call_name horrible_type_initialise mod_name 'horrible'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine horrible_type_finalise call_name horrible_type_finalise mod_name 'horrible'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module use_a_type\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine do_stuff call_name do_stuff mod_name 'use_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine not_used call_name not_used mod_name 'use_a_type'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine top_level call_name top_level mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _leveltwomod.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "/home/ert/code/f90wrap/f90wrap/f90wrapgen.py:175: UserWarning: Source file define.fpp contains code for more than one module!\n  warnings.warn(\n",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "mod_arg_clash",
      "path": "/home/ert/code/f90wrap/examples/mod_arg_clash",
      "status": "FAIL",
      "error_category": "syntax_error",
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_cell.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _cell.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py failed (rc=1)"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:marking module cell as default private\nINFO:f90wrap.parser:parser reading type unit_cell\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(unit_cell)': Type(name=unit_cell),\n 'type(unit_cell)': Type(name=unit_cell),\n 'unit_cell': Type(name=unit_cell)}\n\nClass name mapping:\n{'class(unit_cell)': 'unit_cell',\n 'type(unit_cell)': 'unit_cell',\n 'unit_cell': 'unit_cell'}\nModules for each type:\n{'cell': 'cell'}\nINFO:f90wrap.transform:adding missing constructor for unit_cell\nINFO:f90wrap.transform:adding missing destructor for unit_cell\nINFO:f90wrap.transform:visiting Module(name=cell) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=unit_cell) found 1 constructors with names: ['unit_cell_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module cell\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type unit_cell\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine unit_cell_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine unit_cell_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine cell_dosomething\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module cell\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type unit_cell\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine unit_cell_initialise call_name unit_cell_initialise mod_name 'cell'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine unit_cell_finalise call_name unit_cell_finalise mod_name 'cell'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine cell_dosomething call_name cell_dosomething mod_name 'cell'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _cell.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "  File \"/tmp/tmppsws__9a/tests.py\", line 24\n    import mod_arg_clash_direct as test.cell\n                                       ^\nSyntaxError: invalid syntax\n"
    },
    {
      "name": "optional_args_issue53",
      "path": "/home/ert/code/f90wrap/examples/optional_args_issue53",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_optional_args_issue53_direct.c']",
        "Wrapper sources: ['f90wrap_optional_args_issue53_direct.f90']",
        "Compilation order: ['f90wrap_optional_args_issue53_direct.f90', 'main_pp.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _optional_args_issue53_direct.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine wrap\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine wrap call_name wrap mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _optional_args_issue53_direct.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "optional_derived_arrays",
      "path": "/home/ert/code/f90wrap/examples/optional_derived_arrays",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_io.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _io.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:marking module io as default private\nINFO:f90wrap.parser:parser reading type keyword\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(keyword)': Type(name=keyword),\n 'keyword': Type(name=keyword),\n 'type(keyword)': Type(name=keyword)}\n\nClass name mapping:\n{'class(keyword)': 'keyword', 'keyword': 'keyword', 'type(keyword)': 'keyword'}\nModules for each type:\n{'io': 'io'}\nWARNING:f90wrap.transform:test removing optional argument keywords as only one dimensional fixed-length arrays are currently supported for derived type type(keyword) array\nINFO:f90wrap.transform:adding missing constructor for keyword\nINFO:f90wrap.transform:adding missing destructor for keyword\nINFO:f90wrap.transform:visiting Module(name=io) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=keyword) found 1 constructors with names: ['keyword_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module io\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type keyword\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine keyword_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine keyword_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine io_freeform_open\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module io\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type keyword\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine keyword_initialise call_name keyword_initialise mod_name 'io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine keyword_finalise call_name keyword_finalise mod_name 'io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine io_freeform_open call_name io_freeform_open mod_name 'io'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _io.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "optional_string",
      "path": "/home/ert/code/f90wrap/examples/optional_string",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.f90']",
        "Generated C: ['_m_string_test.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_string_test.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.f90'] ...\nINFO:f90wrap.parser:marking module m_string_test as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=m_string_test) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_string_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_to_string\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_in\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_in_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_out_optional\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_out_optional_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_in_array_hardcoded_size\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_to_string_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_out\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_string_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_to_string call_name string_to_string mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_in call_name string_in mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_in_array call_name string_in_array mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_out_optional call_name string_out_optional mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_out_optional_array call_name string_out_optional_array mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_in_array_hardcoded_size call_name string_in_array_hardcoded_size mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_to_string_array call_name string_to_string_array mod_name 'm_string_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_out call_name string_out mod_name 'm_string_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_string_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "output_kind",
      "path": "/home/ert/code/f90wrap/examples/output_kind",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_out_test.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_out_test.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_out_test as default private\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=m_out_test) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_out_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_array_int8\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_scalar_int1\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_scalar_int4\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_scalar_int2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_scalar_int8\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_scalar_real8\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_array_real8\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_scalar_real4\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_array_int4\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine out_array_real4\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_out_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_array_int8 call_name out_array_int8 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_scalar_int1 call_name out_scalar_int1 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_scalar_int4 call_name out_scalar_int4 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_scalar_int2 call_name out_scalar_int2 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_scalar_int8 call_name out_scalar_int8 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_scalar_real8 call_name out_scalar_real8 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_array_real8 call_name out_array_real8 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_scalar_real4 call_name out_scalar_real4 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_array_int4 call_name out_array_int4 mod_name 'm_out_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine out_array_real4 call_name out_array_real4 mod_name 'm_out_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_out_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "passbyreference",
      "path": "/home/ert/code/f90wrap/examples/passbyreference",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['mycode.F90']",
        "Generated C: ['_mymodule.c']",
        "Wrapper sources: ['f90wrap_mycode.f90']",
        "Compilation order: ['mycode_pp.f90', 'f90wrap_mycode.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _mymodule.c: _mymodule.c: In function \u2018wrap__mymodule_mymodule_mysubroutine\u2019:\n_mymodule.c:48:10: error: variable or field \u2018a_val\u2019 declared void\n   48 |     void a_val;\n      |          ^~~~~\n_mymodule.c:49:10: error: variable or field \u2018b_val\u2019 declared void\n   49 |     void b_val;\n      |          ^~~~~\n_mymodule.c: In function \u2018wrap_mytype_get_val\u2019:\n_mymodule.c:261:10: error: variable or field \u2018value\u2019 declared void\n  261 |     void value;\n      |          ^~~~~\n_mymodule.c: In function \u2018wrap_mytype_set_val\u2019:"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['mycode.F90'] ...\nINFO:f90wrap.parser:parser reading type mytype\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(mytype)': Type(name=mytype),\n 'mytype': Type(name=mytype),\n 'type(mytype)': Type(name=mytype)}\n\nClass name mapping:\n{'class(mytype)': 'mytype', 'mytype': 'mytype', 'type(mytype)': 'mytype'}\nModules for each type:\n{'mymodule': 'mymodule'}\nINFO:f90wrap.transform:adding missing constructor for mytype\nINFO:f90wrap.transform:adding missing destructor for mytype\nINFO:f90wrap.transform:visiting Module(name=mymodule) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=mytype) found 1 constructors with names: ['mytype_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module mymodule\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type mytype\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mytype_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine mysubroutine\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module mymodule\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type mytype\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_initialise call_name mytype_initialise mod_name 'mymodule'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mytype_finalise call_name mytype_finalise mod_name 'mymodule'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine mysubroutine call_name mysubroutine mod_name 'mymodule'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _mymodule.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "recursive_type",
      "path": "/home/ert/code/f90wrap/examples/recursive_type",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['tree.fpp']",
        "Generated C: ['_tree.c']",
        "Wrapper sources: ['f90wrap_tree.f90']",
        "Compilation order: ['tree_pp.f90', 'f90wrap_tree.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _tree.c: _tree.c: In function \u2018wrap_node_get_derived_left\u2019:\n_tree.c:177:22: error: too many arguments to function \u2018f90wrap_node__get__left_\u2019; expected 1, have 2\n  177 |     F90WRAP_F_SYMBOL(f90wrap_node__get__left)(parent_handle, value_handle);\n      |                      ^~~~~~~~~~~~~~~~~~~~~~~\n_tree.c:10:32: note: in definition of macro \u2018F90WRAP_F_SYMBOL\u2019\n   10 | #define F90WRAP_F_SYMBOL(name) name##_\n      |                                ^~~~\n_tree.c:42:30: note: declared here\n   42 | extern void F9"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['tree.fpp'] ...\nINFO:f90wrap.parser:parser reading type node\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(node)': Type(name=node),\n 'node': Type(name=node),\n 'type(node)': Type(name=node)}\n\nClass name mapping:\n{'class(node)': 'node', 'node': 'node', 'type(node)': 'node'}\nModules for each type:\n{'tree': 'tree'}\nINFO:f90wrap.transform:added method treedeallocate to type node\nINFO:f90wrap.transform:added method treeallocate to type node\nINFO:f90wrap.transform:found constructor treeallocate\nINFO:f90wrap.transform:found destructor treedeallocate\nINFO:f90wrap.transform:visiting Module(name=tree) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=node) found 1 constructors with names: ['treeallocate']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module tree\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type node\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine treedeallocate\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine treeallocate\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module tree\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type node\nWARNING:f90wrap.f90wrapgen:oh no\nWARNING:f90wrap.f90wrapgen:oh no\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine treedeallocate call_name treedeallocate mod_name 'tree'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine treeallocate call_name treeAllocate mod_name 'tree'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _tree.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "recursive_type_array",
      "path": "/home/ert/code/f90wrap/examples/recursive_type_array",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_mod_recursive_type_array.c']",
        "Wrapper sources: ['f90wrap_test.f90']",
        "Compilation order: ['test_pp.f90', 'f90wrap_test.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _mod_recursive_type_array.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'character': {'': 'char'},\n 'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float', '8': 'double', 'dp': 'double', 'idp': 'double'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\nINFO:f90wrap.parser:parser reading type t_node\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(t_node)': Type(name=t_node),\n 't_node': Type(name=t_node),\n 'type(t_node)': Type(name=t_node)}\n\nClass name mapping:\n{'class(t_node)': 't_node', 't_node': 't_node', 'type(t_node)': 't_node'}\nModules for each type:\n{'mod_recursive_type_array': 'mod_recursive_type_array'}\nINFO:f90wrap.transform:adding missing constructor for t_node\nINFO:f90wrap.transform:adding missing destructor for t_node\nINFO:f90wrap.transform:visiting Module(name=mod_recursive_type_array) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_node) found 1 constructors with names: ['t_node_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module mod_recursive_type_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_node\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_node_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_node_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine deallocate_node\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine allocate_node\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module mod_recursive_type_array\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_node\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_node_initialise call_name t_node_initialise mod_name 'mod_recursive_type_array'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_node_finalise call_name t_node_finalise mod_name 'mod_recursive_type_array'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine deallocate_node call_name deallocate_node mod_name 'mod_recursive_type_array'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine allocate_node call_name allocate_node mod_name 'mod_recursive_type_array'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _mod_recursive_type_array.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "..\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n"
    },
    {
      "name": "remove_pointer_arg",
      "path": "/home/ert/code/f90wrap/examples/remove_pointer_arg",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_test.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _m_test.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_test as default public\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nWARNING:f90wrap.transform:removing routine to_be_ignored_2 due to pointer arguments\nWARNING:f90wrap.transform:removing routine to_be_ignored_1 due to pointer arguments\nINFO:f90wrap.transform:visiting Module(name=m_test) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine not_to_be_ignored\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine not_to_be_ignored call_name not_to_be_ignored mod_name 'm_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "...\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\n\nOK\n"
    },
    {
      "name": "return_array",
      "path": "/home/ert/code/f90wrap/examples/return_array",
      "status": "FAIL",
      "error_category": "c_compilation_failed",
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_test.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation succeeded",
        "Failed to compile _m_test.c: _m_test.c: In function \u2018wrap_t_array_double_wrapper_get_derived_array_wrapper\u2019:\n_m_test.c:2193:22: error: too many arguments to function \u2018f90wrap_t_array_double_wrapper__get__array_wrapper_\u2019; expected 1, have 2\n 2193 |     F90WRAP_F_SYMBOL(f90wrap_t_array_double_wrapper__get__array_wrapper)(parent_handle, value_handle);\n      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n_m_test.c:10:32: note: in definition of macro \u2018F90WRAP_F_SYMBOL\u2019\n   10 | #define F90WRAP_F_SYMBOL("
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_test as default private\nINFO:f90wrap.parser:parser reading type t_array_wrapper\nINFO:f90wrap.parser:parser reading type t_array_2d_wrapper\nINFO:f90wrap.parser:parser reading type t_array_double_wrapper\nINFO:f90wrap.parser:parser reading type t_value\nINFO:f90wrap.parser:parser reading type t_size_2d\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(t_array_2d_wrapper)': Type(name=t_array_2d_wrapper),\n 'class(t_array_double_wrapper)': Type(name=t_array_double_wrapper),\n 'class(t_array_wrapper)': Type(name=t_array_wrapper),\n 'class(t_size_2d)': Type(name=t_size_2d),\n 'class(t_value)': Type(name=t_value),\n 't_array_2d_wrapper': Type(name=t_array_2d_wrapper),\n 't_array_double_wrapper': Type(name=t_array_double_wrapper),\n 't_array_wrapper': Type(name=t_array_wrapper),\n 't_size_2d': Type(name=t_size_2d),\n 't_value': Type(name=t_value),\n 'type(t_array_2d_wrapper)': Type(name=t_array_2d_wrapper),\n 'type(t_array_double_wrapper)': Type(name=t_array_double_wrapper),\n 'type(t_array_wrapper)': Type(name=t_array_wrapper),\n 'type(t_size_2d)': Type(name=t_size_2d),\n 'type(t_value)': Type(name=t_value)}\n\nClass name mapping:\n{'class(t_array_2d_wrapper)': 't_array_2d_wrapper',\n 'class(t_array_double_wrapper)': 't_array_double_wrapper',\n 'class(t_array_wrapper)': 't_array_wrapper',\n 'class(t_size_2d)': 't_size_2d',\n 'class(t_value)': 't_value',\n 't_array_2d_wrapper': 't_array_2d_wrapper',\n 't_array_double_wrapper': 't_array_double_wrapper',\n 't_array_wrapper': 't_array_wrapper',\n 't_size_2d': 't_size_2d',\n 't_value': 't_value',\n 'type(t_array_2d_wrapper)': 't_array_2d_wrapper',\n 'type(t_array_double_wrapper)': 't_array_double_wrapper',\n 'type(t_array_wrapper)': 't_array_wrapper',\n 'type(t_size_2d)': 't_size_2d',\n 'type(t_value)': 't_value'}\nModules for each type:\n{'m_test': 'm_test'}\nINFO:f90wrap.transform:adding missing constructor for t_array_wrapper\nINFO:f90wrap.transform:adding missing constructor for t_array_2d_wrapper\nINFO:f90wrap.transform:adding missing constructor for t_array_double_wrapper\nINFO:f90wrap.transform:adding missing constructor for t_value\nINFO:f90wrap.transform:adding missing constructor for t_size_2d\nINFO:f90wrap.transform:adding missing destructor for t_array_wrapper\nINFO:f90wrap.transform:adding missing destructor for t_array_2d_wrapper\nINFO:f90wrap.transform:adding missing destructor for t_array_double_wrapper\nINFO:f90wrap.transform:adding missing destructor for t_value\nINFO:f90wrap.transform:adding missing destructor for t_size_2d\nINFO:f90wrap.transform:visiting Module(name=m_test) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_array_wrapper) found 1 constructors with names: ['t_array_wrapper_initialise']\nINFO:f90wrap.transform:visiting Type(name=t_array_2d_wrapper) found 1 constructors with names: ['t_array_2d_wrapper_initialise']\nINFO:f90wrap.transform:visiting Type(name=t_array_double_wrapper) found 1 constructors with names: ['t_array_double_wrapper_initialise']\nINFO:f90wrap.transform:visiting Type(name=t_value) found 1 constructors with names: ['t_value_initialise']\nINFO:f90wrap.transform:visiting Type(name=t_size_2d) found 1 constructors with names: ['t_size_2d_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_array_wrapper\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_array_wrapper_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_array_wrapper_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_array_2d_wrapper\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_array_2d_wrapper_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_array_2d_wrapper_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_array_double_wrapper\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_array_double_wrapper_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_array_double_wrapper_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_value\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_value_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_value_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_size_2d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_size_2d_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_size_2d_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_input\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_input' ('in_len' -> 'in_len')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_size_2d_in\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_size_2d_in' ('size_bn(in_array,2)' -> 'in_array.shape[1]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_wrapper_init\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_init\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_scalar\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_2d_init\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_input_2d\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_input_2d' ('in_len_x' -> 'in_len_x')\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_input_2d' ('in_len_y' -> 'in_len_y')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_member_wrapper\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_member_wrapper' ('in_wrapper%array_wrapper%a_size' -> 'self.array_wrapper.a_size')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_hard_coded_2d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_member_2d\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_member_2d' ('in_array%a_size_x' -> 'self.a_size_x')\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_member_2d' ('in_array%a_size_y' -> 'self.a_size_y')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_size_2d_out\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_size_2d_out' ('size_bn(in_array_1,1)' -> 'in_array_1.shape[0]')\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_size_2d_out' ('size_bn(in_array_2,2)' -> 'in_array_2.shape[1]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_member\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_member' ('in_array%a_size' -> 'self.a_size')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_array_size\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_array_size' ('size_bn(in_array)' -> 'in_array.shape[0]')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_derived_type_value\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_derived_type_value' ('size_2d%x' -> 'size_2d.x')\nINFO:f90wrap.pywrapgen:Adding dimension argument to 'return_derived_type_value' ('size_2d%y' -> 'size_2d.y')\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_hard_coded_1d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine array_free\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_array_wrapper\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_array_wrapper_initialise call_name t_array_wrapper_initialise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_array_wrapper_finalise call_name t_array_wrapper_finalise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_array_2d_wrapper\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_array_2d_wrapper_initialise call_name t_array_2d_wrapper_initialise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_array_2d_wrapper_finalise call_name t_array_2d_wrapper_finalise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_array_double_wrapper\nWARNING:f90wrap.f90wrapgen:oh no\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_array_double_wrapper_initialise call_name t_array_double_wrapper_initialise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_array_double_wrapper_finalise call_name t_array_double_wrapper_finalise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_value\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_value_initialise call_name t_value_initialise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_value_finalise call_name t_value_finalise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_size_2d\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_size_2d_initialise call_name t_size_2d_initialise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_size_2d_finalise call_name t_size_2d_finalise mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_input call_name return_array_input mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_size_2d_in call_name return_array_size_2d_in mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_wrapper_init call_name array_wrapper_init mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_init call_name array_init mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_scalar call_name return_scalar mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_2d_init call_name array_2d_init mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_input_2d call_name return_array_input_2d mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_member_wrapper call_name return_array_member_wrapper mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_hard_coded_2d call_name return_hard_coded_2d mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_member_2d call_name return_array_member_2d mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_size_2d_out call_name return_array_size_2d_out mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_member call_name return_array_member mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_array_size call_name return_array_size mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_derived_type_value call_name return_derived_type_value mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_hard_coded_1d call_name return_hard_coded_1d mod_name 'm_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine array_free call_name array_free mod_name 'm_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "string_array_input_f2py",
      "path": "/home/ert/code/f90wrap/examples/string_array_input_f2py",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_string_array_input_f2py_direct.c']",
        "Wrapper sources: ['f90wrap_string_array_input_f2py_direct.f90']",
        "Compilation order: ['f90wrap_string_array_input_f2py_direct.f90', 'main_pp.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _string_array_input_f2py_direct.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_in_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine string_in_array_optional\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_in_array call_name string_in_array mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine string_in_array_optional call_name string_in_array_optional mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _string_array_input_f2py_direct.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "strings",
      "path": "/home/ert/code/f90wrap/examples/strings",
      "status": "FAIL",
      "error_category": "type_error",
      "notes": [
        "f90wrap inputs: ['string_io.fpp']",
        "Generated C: ['_string_io.c']",
        "Wrapper sources: ['f90wrap_string_io.f90']",
        "Compilation order: ['string_io_pp.f90', 'f90wrap_string_io.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _string_io.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py failed (rc=1)"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['string_io.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=string_io) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module string_io\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine func_generate_string\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine return_string\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine set_global_string\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine func_return_string\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine inout_string\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine generate_string\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module string_io\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine func_generate_string call_name func_generate_string mod_name 'string_io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine return_string call_name return_string mod_name 'string_io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine set_global_string call_name set_global_string mod_name 'string_io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine func_return_string call_name func_return_string mod_name 'string_io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine inout_string call_name inout_string mod_name 'string_io'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine generate_string call_name generate_string mod_name 'string_io'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _string_io.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": "....E....E\n======================================================================\nERROR: test_set_global_string (__main__.LibTests.test_set_global_string)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmp3wjmg3e1/tests.py\", line 112, in test_set_global_string\n    self.lib.set_global_string(self.n, self.text)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^\nTypeError: String_Io.set_global_string() takes 2 positional arguments but 3 were given\n\n======================================================================\nERROR: test_set_global_string (__main__.LibTestsPkg.test_set_global_string)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/tmp/tmp3wjmg3e1/tests.py\", line 112, in test_set_global_string\n    self.lib.set_global_string(self.n, self.text)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^\nTypeError: String_Io.set_global_string() takes 2 positional arguments but 3 were given\n\n----------------------------------------------------------------------\nRan 10 tests in 0.001s\n\nFAILED (errors=2)\n"
    },
    {
      "name": "subroutine_args",
      "path": "/home/ert/code/f90wrap/examples/subroutine_args",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['subroutine_mod.fpp']",
        "Generated C: ['_subroutine_mod.c']",
        "Wrapper sources: ['f90wrap_subroutine_mod.f90']",
        "Compilation order: ['subroutine_mod_pp.f90', 'f90wrap_subroutine_mod.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _subroutine_mod.cpython-313-x86_64-linux-gnu.so",
        "tests.py rewritten for direct module",
        "tests.py passed"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{'complex': {'': 'complex_float',\n             '16': 'complex_long_double',\n             '8': 'complex_double',\n             'dp': 'complex_double'},\n 'integer': {'4': 'int', '8': 'long_long', 'dp': 'long_long'},\n 'real': {'': 'float',\n          '4': 'float',\n          '8': 'double',\n          'dp': 'double',\n          'idp': 'double',\n          'isp': 'float'}}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['subroutine_mod.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.transform:visiting Module(name=subroutine_mod) found 0 constructors with names: []\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module subroutine_mod\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_with_more_commented_args\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_with_commented_args\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_with_multiline_args\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_with_simple_args\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module subroutine_mod\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_with_more_commented_args call_name routine_with_more_commented_args mod_name 'subroutine_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_with_commented_args call_name routine_with_commented_args mod_name 'subroutine_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_with_multiline_args call_name routine_with_multiline_args mod_name 'subroutine_mod'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_with_simple_args call_name routine_with_simple_args mod_name 'subroutine_mod'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _subroutine_mod.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "subroutine_contains_issue101",
      "path": "/home/ert/code/f90wrap/examples/subroutine_contains_issue101",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['test.fpp']",
        "Generated C: ['_subroutine_contains_issue101_direct.c']",
        "Wrapper sources: ['f90wrap_subroutine_contains_issue101_direct.f90']",
        "Compilation order: ['f90wrap_subroutine_contains_issue101_direct.f90', 'test_pp.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _subroutine_contains_issue101_direct.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['test.fpp'] ...\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{}\n\nClass name mapping:\n{}\nModules for each type:\n{}\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_member_procedures\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine routine_member_procedures2\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine function_member_procedures\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_member_procedures call_name routine_member_procedures mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine routine_member_procedures2 call_name routine_member_procedures2 mod_name None\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine function_member_procedures call_name function_member_procedures mod_name None\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _subroutine_contains_issue101_direct.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "type_bn",
      "path": "/home/ert/code/f90wrap/examples/type_bn",
      "status": "PASS",
      "error_category": null,
      "notes": [
        "f90wrap inputs: ['type_bn.fpp']",
        "Generated C: ['_module_structure.c']",
        "Wrapper sources: ['f90wrap_type_bn.f90']",
        "Compilation order: ['type_bn_pp.f90', 'f90wrap_type_bn.f90']",
        "Fortran compilation succeeded",
        "C compilation succeeded",
        "Linking succeeded",
        "Alias created: _module_structure.cpython-313-x86_64-linux-gnu.so",
        "Compilation succeeded; no tests.py present"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['type_bn.fpp'] ...\nINFO:f90wrap.parser:parser reading type type_face\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(type_face)': Type(name=type_face),\n 'type(type_face)': Type(name=type_face),\n 'type_face': Type(name=type_face)}\n\nClass name mapping:\n{'class(type_face)': 'type_face',\n 'type(type_face)': 'type_face',\n 'type_face': 'type_face'}\nModules for each type:\n{'module_structure': 'module_structure'}\nINFO:f90wrap.transform:adding missing constructor for type_face\nINFO:f90wrap.transform:adding missing destructor for type_face\nINFO:f90wrap.transform:visiting Module(name=module_structure) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=type_face) found 1 constructors with names: ['type_face_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module module_structure\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type type_face\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine type_face_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine type_face_finalise\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module module_structure\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type type_face\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine type_face_initialise call_name type_face_initialise mod_name 'module_structure'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine type_face_finalise call_name type_face_finalise mod_name 'module_structure'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _module_structure.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    },
    {
      "name": "type_check",
      "path": "/home/ert/code/f90wrap/examples/type_check",
      "status": "FAIL",
      "error_category": "fortran_compilation_failed",
      "notes": [
        "f90wrap inputs: ['main.fpp']",
        "Generated C: ['_m_type_test.c']",
        "Wrapper sources: ['f90wrap_main.f90']",
        "Compilation order: ['main_pp.f90', 'f90wrap_main.f90']",
        "Fortran compilation failed: f90wrap_main.f90:293:17:\n\n  293 |     ret_output = in_scalar(input=input)\n      |                 1\nError: There is no specific function for the generic \u2018in_scalar\u2019 at (1)\nf90wrap_main.f90:304:17:\n\n  304 |     ret_output = in_scalar(input=input)\n      |                 1\nError: There is no specific function for the generic \u2018in_scalar\u2019 at (1)\n",
        "Module dependency hints: main_pp.f90: defines m_type_test; f90wrap_main.f90: uses ['m_type_test']"
      ],
      "f90wrap_output": "Kind map (also saved to .f2py_f2cmap)\n{}\n\nConstructors:\n['initialise_ptr', 'initialise', 'allocate']\n\nDestructors:\n['finalise', 'deallocate']\n\nShort names for derived types:\n{}\n\nString lengths:\n{}\n\nInitialisation lines for derived types\n{}\n\nPython module name remapping\n{}\nClass names remapping\n{}\n\nArgument name map:\n{}\n\nSize of Fortran derived type pointers is 4 bytes.\n\nParsing Fortran source files ['main.fpp'] ...\nINFO:f90wrap.parser:marking module m_type_test as default private\nINFO:f90wrap.parser:parser reading type t_square\nINFO:f90wrap.parser:parser reading type t_circle\ndone parsing source.\n\nDerived types detected in Fortran source files:\n{'class(t_circle)': Type(name=t_circle),\n 'class(t_square)': Type(name=t_square),\n 't_circle': Type(name=t_circle),\n 't_square': Type(name=t_square),\n 'type(t_circle)': Type(name=t_circle),\n 'type(t_square)': Type(name=t_square)}\n\nClass name mapping:\n{'class(t_circle)': 't_circle',\n 'class(t_square)': 't_square',\n 't_circle': 't_circle',\n 't_square': 't_square',\n 'type(t_circle)': 't_circle',\n 'type(t_square)': 't_square'}\nModules for each type:\n{'m_type_test': 'm_type_test'}\nINFO:f90wrap.transform:setting call_name of is_circle_circle to is_circle\nINFO:f90wrap.transform:setting call_name of is_circle_square to is_circle\nINFO:f90wrap.transform:setting call_name of write_array_real to write_array\nINFO:f90wrap.transform:setting call_name of write_array_int_2d to write_array\nINFO:f90wrap.transform:setting call_name of write_array_int64_0d to write_array\nINFO:f90wrap.transform:setting call_name of write_array_int32_0d to write_array\nINFO:f90wrap.transform:setting call_name of write_array_real64_0d to write_array\nINFO:f90wrap.transform:setting call_name of write_array_real32_0d to write_array\nINFO:f90wrap.transform:setting call_name of write_array_double to write_array\nINFO:f90wrap.transform:setting call_name of write_array_bool to write_array\nINFO:f90wrap.transform:setting call_name of write_array_int_1d to write_array\nINFO:f90wrap.transform:setting call_name of optional_scalar_int to optional_scalar\nINFO:f90wrap.transform:setting call_name of optional_scalar_real to optional_scalar\nINFO:f90wrap.transform:setting call_name of in_scalar_int64 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_scalar_real64 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_scalar_int8 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_scalar_int16 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_array_real64 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_array_int64 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_scalar_int32 to in_scalar\nINFO:f90wrap.transform:setting call_name of in_scalar_real32 to in_scalar\nINFO:f90wrap.transform:adding missing constructor for t_square\nINFO:f90wrap.transform:adding missing constructor for t_circle\nINFO:f90wrap.transform:adding missing destructor for t_square\nINFO:f90wrap.transform:adding missing destructor for t_circle\nINFO:f90wrap.transform:visiting Module(name=m_type_test) found 0 constructors with names: []\nINFO:f90wrap.transform:visiting Type(name=t_square) found 1 constructors with names: ['t_square_initialise']\nINFO:f90wrap.transform:visiting Type(name=t_circle) found 1 constructors with names: ['t_circle_initialise']\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting module m_type_test\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_square_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_square_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting type t_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_circle_initialise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine t_circle_finalise\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting interface is_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_circle_circle\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine is_circle_square\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting interface write_array\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_real\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_int_2d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_int64_0d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_int32_0d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_real64_0d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_real32_0d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_double\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_bool\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine write_array_int_1d\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting interface optional_scalar\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine optional_scalar_int\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine optional_scalar_real\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting interface in_scalar\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_scalar_int64\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_scalar_real64\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_scalar_int8\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_scalar_int16\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_array_real64\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_array_int64\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_scalar_int32\nINFO:f90wrap.pywrapgen:PythonWrapperGenerator visiting routine in_scalar_real32\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting module m_type_test\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_square\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_square_initialise call_name t_square_initialise mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_square_finalise call_name t_square_finalise mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting type t_circle\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_circle_initialise call_name t_circle_initialise mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine t_circle_finalise call_name t_circle_finalise mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_circle_circle call_name is_circle mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine is_circle_square call_name is_circle mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_real call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_int_2d call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_int64_0d call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_int32_0d call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_real64_0d call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_real32_0d call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_double call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_bool call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine write_array_int_1d call_name write_array mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine optional_scalar_int call_name optional_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine optional_scalar_real call_name optional_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_scalar_int64 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_scalar_real64 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_scalar_int8 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_scalar_int16 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_array_real64 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_array_int64 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_scalar_int32 call_name in_scalar mod_name 'm_type_test'\nINFO:f90wrap.f90wrapgen:F90WrapperGenerator visiting routine in_scalar_real32 call_name in_scalar mod_name 'm_type_test'\nINFO:root:Generating Direct-C extension modules...\nINFO:root:Generated _m_type_test.c\nINFO:root:Direct-C generation complete. Compile C files with your toolchain.\n",
      "f90wrap_error": "",
      "test_output": "",
      "test_error": ""
    }
  ],
  "error_categories": {
    "no_c_output": [
      "cylinder"
    ],
    "syntax_error": [
      "derived-type-aliases",
      "mod_arg_clash"
    ],
    "attribute_error": [
      "derivedtypes",
      "fixed_1D_derived_type_array_argument"
    ],
    "c_compilation_failed": [
      "derivedtypes_procedure",
      "issue235_allocatable_classes",
      "issue261_array_shapes",
      "issue41_abstract_classes",
      "passbyreference",
      "recursive_type",
      "return_array"
    ],
    "fortran_compilation_failed": [
      "fortran_oo",
      "issue258_derived_type_attributes",
      "kind_map_default",
      "type_check"
    ],
    "type_error": [
      "strings"
    ]
  }
}
